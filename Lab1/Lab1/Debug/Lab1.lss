
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e67  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000831  00000000  00000000  000013d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc4  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  000027cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  00002994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075c  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000362c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_4>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	61 00       	.word	0x0061	; ????
  6a:	64 00       	.word	0x0064	; ????
  6c:	67 00       	.word	0x0067	; ????
  6e:	6a 00       	.word	0x006a	; ????
  70:	6d 00       	.word	0x006d	; ????
  72:	70 00       	.word	0x0070	; ????
  74:	73 00       	.word	0x0073	; ????
  76:	76 00       	.word	0x0076	; ????
  78:	79 00       	.word	0x0079	; ????
  7a:	7c 00       	.word	0x007c	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a8 30       	cpi	r26, 0x08	; 8
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  9c:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <initDisplay>:
	}
}

void initDisplay(void){
	// Puerto D como salida
	DDRD = 0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  a8:	1b b8       	out	0x0b, r1	; 11
	// Utilizar Rx y Tx
	UCSR0B = 0;
  aa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ae:	08 95       	ret

000000b0 <Nums>:
}

void Nums(uint8_t Numero){
	switch(Numero){
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	8a 30       	cpi	r24, 0x0A	; 10
  b4:	91 05       	cpc	r25, r1
  b6:	18 f5       	brcc	.+70     	; 0xfe <Nums+0x4e>
  b8:	fc 01       	movw	r30, r24
  ba:	ec 5c       	subi	r30, 0xCC	; 204
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	0c 94 c2 01 	jmp	0x384	; 0x384 <__tablejump2__>
		case 0:
			PORTD = 0x3F;
  c2:	8f e3       	ldi	r24, 0x3F	; 63
  c4:	8b b9       	out	0x0b, r24	; 11
			break;
  c6:	08 95       	ret
		case 1:
			PORTD = 0x06;
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	8b b9       	out	0x0b, r24	; 11
			break;
  cc:	08 95       	ret
		case 2:
			PORTD = 0x5B;
  ce:	8b e5       	ldi	r24, 0x5B	; 91
  d0:	8b b9       	out	0x0b, r24	; 11
			break;
  d2:	08 95       	ret
		case 3:
			PORTD = 0x4F;
  d4:	8f e4       	ldi	r24, 0x4F	; 79
  d6:	8b b9       	out	0x0b, r24	; 11
			break;
  d8:	08 95       	ret
		case 4:
			PORTD = 0x66;
  da:	86 e6       	ldi	r24, 0x66	; 102
  dc:	8b b9       	out	0x0b, r24	; 11
			break;
  de:	08 95       	ret
		case 5:
			PORTD = 0x6D;
  e0:	8d e6       	ldi	r24, 0x6D	; 109
  e2:	8b b9       	out	0x0b, r24	; 11
			break;
  e4:	08 95       	ret
		case 6:
			PORTD = 0x7D;
  e6:	8d e7       	ldi	r24, 0x7D	; 125
  e8:	8b b9       	out	0x0b, r24	; 11
			break;
  ea:	08 95       	ret
		case 7:
			PORTD = 0x07;
  ec:	87 e0       	ldi	r24, 0x07	; 7
  ee:	8b b9       	out	0x0b, r24	; 11
			break;
  f0:	08 95       	ret
		case 8:
			PORTD = 0x7F;
  f2:	8f e7       	ldi	r24, 0x7F	; 127
  f4:	8b b9       	out	0x0b, r24	; 11
			break;
  f6:	08 95       	ret
		case 9:
			PORTD = 0x6F;
  f8:	8f e6       	ldi	r24, 0x6F	; 111
  fa:	8b b9       	out	0x0b, r24	; 11
			break;
  fc:	08 95       	ret
		default:
			PORTD = 0x00;
  fe:	1b b8       	out	0x0b, r1	; 11
 100:	08 95       	ret

00000102 <Setup>:
		Mux();
    }
}

void Setup(void){
	hab = 0;
 102:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <hab>
	empezar = 0;
 106:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <empezar>
	DDRC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2));
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	88 7f       	andi	r24, 0xF8	; 248
 10e:	87 b9       	out	0x07, r24	; 7
	DDRC |= ((1<<PC3) | (1<<PC4) | (1<<PC5) | (1<<PC6));
 110:	87 b1       	in	r24, 0x07	; 7
 112:	88 67       	ori	r24, 0x78	; 120
 114:	87 b9       	out	0x07, r24	; 7
	DDRB |= ((1<<PB0) | (1<<PB1) | (1<<PB2) | (1<<PB3));
 116:	84 b1       	in	r24, 0x04	; 4
 118:	8f 60       	ori	r24, 0x0F	; 15
 11a:	84 b9       	out	0x04, r24	; 4
	initDisplay();
 11c:	0e 94 52 00 	call	0xa4	; 0xa4 <initDisplay>
	// Habilitar la interrupción de cambio de pin en PC0 (PCINT8) y PC3 (PCINT11)
	PCICR |= (1 << PCIE1);  // Habilitar interrupciones de cambio de pin para el grupo PCINT[14:8]
 120:	e8 e6       	ldi	r30, 0x68	; 104
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10);  // Habilitar interrupciones de cambio de pin para PC0 (PCINT8), PC1 (PCINT9) y PC2 (PCINT10)
 12a:	ec e6       	ldi	r30, 0x6C	; 108
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	87 60       	ori	r24, 0x07	; 7
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <__vector_4>:
}

ISR(PCINT1_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
	if (PINC == 0x04){
 142:	86 b1       	in	r24, 0x06	; 6
 144:	84 30       	cpi	r24, 0x04	; 4
 146:	81 f4       	brne	.+32     	; 0x168 <__vector_4+0x32>
		empezar = 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <empezar>
		Cont1 = 0;
 14e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Cont1>
		Cont2 = 0;
 152:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Cont2>
		Jug1 = 0;
 156:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Jug1>
		Jug2 = 0;
 15a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Jug2>
		Term1 = 0;
 15e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Term1>
		Term2 = 0;
 162:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	2b c0       	rjmp	.+86     	; 0x1be <__vector_4+0x88>
	}
	else if ((PINC == 0x02 && hab == 1))
 168:	86 b1       	in	r24, 0x06	; 6
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	51 f4       	brne	.+20     	; 0x182 <__vector_4+0x4c>
 16e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hab>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	31 f4       	brne	.+12     	; 0x182 <__vector_4+0x4c>
	{
		Cont2++;
 176:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Cont2>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Cont2>
 180:	1e c0       	rjmp	.+60     	; 0x1be <__vector_4+0x88>
	}
	else if ((PINC == 0x01 && hab == 1))
 182:	86 b1       	in	r24, 0x06	; 6
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	51 f4       	brne	.+20     	; 0x19c <__vector_4+0x66>
 188:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hab>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	31 f4       	brne	.+12     	; 0x19c <__vector_4+0x66>
	{
		Cont1++;
 190:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Cont1>
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Cont1>
 19a:	11 c0       	rjmp	.+34     	; 0x1be <__vector_4+0x88>
	}
	else if ((PINC == 0x03 && hab == 1))
 19c:	86 b1       	in	r24, 0x06	; 6
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	71 f4       	brne	.+28     	; 0x1be <__vector_4+0x88>
 1a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hab>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	51 f4       	brne	.+20     	; 0x1be <__vector_4+0x88>
	{
		Cont1++;
 1aa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Cont1>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Cont1>
		Cont2++;
 1b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Cont2>
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Cont2>
	}
}
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <Salida1>:

void Salida1(uint8_t Cont1){
	switch(Cont1){
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	91 f0       	breq	.+36     	; 0x1f2 <Salida1+0x28>
 1ce:	28 f4       	brcc	.+10     	; 0x1da <Salida1+0x10>
 1d0:	88 23       	and	r24, r24
 1d2:	41 f0       	breq	.+16     	; 0x1e4 <Salida1+0x1a>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	49 f0       	breq	.+18     	; 0x1ea <Salida1+0x20>
 1d8:	18 c0       	rjmp	.+48     	; 0x20a <Salida1+0x40>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	71 f0       	breq	.+28     	; 0x1fa <Salida1+0x30>
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	81 f0       	breq	.+32     	; 0x202 <Salida1+0x38>
 1e2:	13 c0       	rjmp	.+38     	; 0x20a <Salida1+0x40>
		case 0:
		Jug1 = 0x00;
 1e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Jug1>
		break;
 1e8:	08 95       	ret
		case 1:
		Jug1 = 0x01;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Jug1>
		break;
 1f0:	08 95       	ret
		case 2:
		Jug1 = 0x02;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Jug1>
		break;
 1f8:	08 95       	ret
		case 3:
		Jug1 = 0x04;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Jug1>
		break;
 200:	08 95       	ret
		case 4:
		//Jug1 = 0x08;
		Term1 = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Term1>
		break;
 208:	08 95       	ret
		default:
		Jug1 = 0x00;
 20a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Jug1>
 20e:	08 95       	ret

00000210 <Salida2>:
	}
}

void Salida2(uint8_t Cont2){
	switch(Cont2){
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	91 f0       	breq	.+36     	; 0x238 <Salida2+0x28>
 214:	28 f4       	brcc	.+10     	; 0x220 <Salida2+0x10>
 216:	88 23       	and	r24, r24
 218:	41 f0       	breq	.+16     	; 0x22a <Salida2+0x1a>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	49 f0       	breq	.+18     	; 0x230 <Salida2+0x20>
 21e:	18 c0       	rjmp	.+48     	; 0x250 <Salida2+0x40>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	71 f0       	breq	.+28     	; 0x240 <Salida2+0x30>
 224:	84 30       	cpi	r24, 0x04	; 4
 226:	81 f0       	breq	.+32     	; 0x248 <Salida2+0x38>
 228:	13 c0       	rjmp	.+38     	; 0x250 <Salida2+0x40>
		case 0:
			Jug2 = 0x00;
 22a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Jug2>
			break;
 22e:	08 95       	ret
		case 1:
			Jug2 = 0x01;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Jug2>
			break;
 236:	08 95       	ret
		case 2:
			Jug2 = 0x02;
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Jug2>
			break;
 23e:	08 95       	ret
		case 3:
			Jug2 = 0x04;
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Jug2>
			break;
 246:	08 95       	ret
		case 4:
			//Jug2 = 0x08;
			Term2 = 1;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 24e:	08 95       	ret
		default:
			Jug2 = 0x00;
 250:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Jug2>
 254:	08 95       	ret

00000256 <Mux>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	9c e7       	ldi	r25, 0x7C	; 124
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <Mux+0x4>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <Mux+0xa>
 260:	00 00       	nop
	}
}

void Mux(void){
	_delay_ms(8);
	PORTB = Jug1;
 262:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Jug1>
 266:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1<<PC3);
 268:	88 b1       	in	r24, 0x08	; 8
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<PC4);
 26e:	88 b1       	in	r24, 0x08	; 8
 270:	8f 7e       	andi	r24, 0xEF	; 239
 272:	88 b9       	out	0x08, r24	; 8
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9c e7       	ldi	r25, 0x7C	; 124
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <Mux+0x22>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <Mux+0x28>
 27e:	00 00       	nop
	_delay_ms(8);
	PORTB = Jug2;
 280:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Jug2>
 284:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1<<PC4);
 286:	88 b1       	in	r24, 0x08	; 8
 288:	80 61       	ori	r24, 0x10	; 16
 28a:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<PC3);
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	88 b9       	out	0x08, r24	; 8
 292:	08 95       	ret

00000294 <main>:
void Salida2(uint8_t Cont2);
void Mux(void);

int main(void)
{
    Setup();
 294:	0e 94 81 00 	call	0x102	; 0x102 <Setup>
	
	sei();	
 298:	78 94       	sei
	
    while (1) 
    {
		if (empezar == 1)
 29a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <empezar>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <main+0x10>
 2a2:	48 c0       	rjmp	.+144    	; 0x334 <main+0xa0>
		{
			empezar = 0;
 2a4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <empezar>
			Nums(5);
 2a8:	85 e0       	ldi	r24, 0x05	; 5
 2aa:	0e 94 58 00 	call	0xb0	; 0xb0 <Nums>
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	83 ed       	ldi	r24, 0xD3	; 211
 2b2:	90 e3       	ldi	r25, 0x30	; 48
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x20>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x2a>
 2be:	00 00       	nop
			_delay_ms(1000);
			Nums(4);
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	0e 94 58 00 	call	0xb0	; 0xb0 <Nums>
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	83 ed       	ldi	r24, 0xD3	; 211
 2ca:	90 e3       	ldi	r25, 0x30	; 48
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x38>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x42>
 2d6:	00 00       	nop
			_delay_ms(1000);
			Nums(3);
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	0e 94 58 00 	call	0xb0	; 0xb0 <Nums>
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	83 ed       	ldi	r24, 0xD3	; 211
 2e2:	90 e3       	ldi	r25, 0x30	; 48
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x50>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x5a>
 2ee:	00 00       	nop
			_delay_ms(1000);
			Nums(2);
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 58 00 	call	0xb0	; 0xb0 <Nums>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	83 ed       	ldi	r24, 0xD3	; 211
 2fa:	90 e3       	ldi	r25, 0x30	; 48
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x68>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x72>
 306:	00 00       	nop
			_delay_ms(1000);
			Nums(1);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 58 00 	call	0xb0	; 0xb0 <Nums>
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	83 ed       	ldi	r24, 0xD3	; 211
 312:	90 e3       	ldi	r25, 0x30	; 48
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x80>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x8a>
 31e:	00 00       	nop
			_delay_ms(1000);
			Nums(0);
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 58 00 	call	0xb0	; 0xb0 <Nums>
			Cont1 = 0;
 326:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Cont1>
			Cont2 = 0;
 32a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Cont2>
			hab = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <hab>
		}
		if (Term1 == 1)
 334:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Term1>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	59 f4       	brne	.+22     	; 0x352 <main+0xbe>
		{
			hab = 0;
 33c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <hab>
			Jug1 = 0x0F;
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Jug1>
			Cont2 = 0;
 346:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Cont2>
			Nums(1);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 58 00 	call	0xb0	; 0xb0 <Nums>
 350:	0e c0       	rjmp	.+28     	; 0x36e <main+0xda>
		}
		else if (Term2 == 1)
 352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	51 f4       	brne	.+20     	; 0x36e <main+0xda>
		{
			hab = 0;
 35a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <hab>
			Jug2 = 0x0F;
 35e:	8f e0       	ldi	r24, 0x0F	; 15
 360:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Jug2>
			Cont1 = 0;
 364:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Cont1>
			Nums(2);
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 58 00 	call	0xb0	; 0xb0 <Nums>
		}
		Salida1(Cont1);
 36e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Cont1>
 372:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Salida1>
		Salida2(Cont2);
 376:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Cont2>
 37a:	0e 94 08 01 	call	0x210	; 0x210 <Salida2>
		Mux();
 37e:	0e 94 2b 01 	call	0x256	; 0x256 <Mux>
    }
 382:	8b cf       	rjmp	.-234    	; 0x29a <main+0x6>

00000384 <__tablejump2__>:
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	05 90       	lpm	r0, Z+
 38a:	f4 91       	lpm	r31, Z
 38c:	e0 2d       	mov	r30, r0
 38e:	09 94       	ijmp

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
