
labo4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000895  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000751  00000000  00000000  00000bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043e  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_slave_init>:
#include <avr/io.h>
#include <stdint.h>
#include "I2C_SLAVE.h"

void I2C_slave_init(uint8_t address){
	DDRC &= ~((1 << DDC4)|(DDC5));
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9a 7e       	andi	r25, 0xEA	; 234
  94:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1 & 0b11111110; //direccion que tendra
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>

	TWCR = (1 << TWEA)|(1 << TWEN)|(1 << TWIE); //habilita la ISR
  a0:	85 e4       	ldi	r24, 0x45	; 69
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <initPorts>:
	}
}

void initPorts(void) {
	// Configurar pines de botones como entrada con pull-up
	DDRC &= ~((1 << PORTC0) | (1 << PORTC1)); //entradas 
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	8c 7f       	andi	r24, 0xFC	; 252
  ac:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1); //pull up
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~((1 << PORTC4) | (1 << PORTC5)); //Entradas
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	8f 7c       	andi	r24, 0xCF	; 207
  b8:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC4) | (1 << PORTC5); //pull up
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	80 63       	ori	r24, 0x30	; 48
  be:	88 b9       	out	0x08, r24	; 8

	// Configurar pines de LEDs (D2-D5) como salida
	DDRD |= 0b00111100; // D2-D5 como salida
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	8c 63       	ori	r24, 0x3C	; 60
  c4:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~0b00111100; // Apagar inicialmente
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	83 7c       	andi	r24, 0xC3	; 195
  ca:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1 << DDB5); //portb salidas
  cc:	25 9a       	sbi	0x04, 5	; 4
  ce:	08 95       	ret

000000d0 <leds>:
	
}

void leds(void) {
	PORTD &= ~0b00111100; // Apagar LEDs en D2-D5
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	83 7c       	andi	r24, 0xC3	; 195
  d4:	8b b9       	out	0x0b, r24	; 11
	PORTD |= ((contador & 0b00001111) << 2); // Desplazar bits a D2-D5
  d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
  da:	9b b1       	in	r25, 0x0b	; 11
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	88 0f       	add	r24, r24
  e0:	88 0f       	add	r24, r24
  e2:	89 2b       	or	r24, r25
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	08 95       	ret

000000e8 <main>:

#define slave_address 0x40

int main(void)
{
	cli();
  e8:	f8 94       	cli
	initPorts();
  ea:	0e 94 54 00 	call	0xa8	; 0xa8 <initPorts>
	leds();
  ee:	0e 94 68 00 	call	0xd0	; 0xd0 <leds>
	I2C_slave_init(slave_address);
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	0e 94 48 00 	call	0x90	; 0x90 <I2C_slave_init>
	sei();
  f8:	78 94       	sei

	while (1)
	{
		// Verifica si se presiona el botón de incrementar
		if (!(PINC & (1 << PORTC0))) {
  fa:	30 99       	sbic	0x06, 0	; 6
  fc:	16 c0       	rjmp	.+44     	; 0x12a <main+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	80 e7       	ldi	r24, 0x70	; 112
 102:	92 e0       	ldi	r25, 0x02	; 2
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x1c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x26>
 10e:	00 00       	nop
			_delay_ms(50); // Antirrebote
			while (!(PINC & (1 << PORTC0))); // Esperar a que se suelte
 110:	30 9b       	sbis	0x06, 0	; 6
 112:	fe cf       	rjmp	.-4      	; 0x110 <main+0x28>
			if (contador < 15) contador++;  // Limitar a 4 bits
 114:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	28 f4       	brcc	.+10     	; 0x126 <main+0x3e>
 11c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contador>
			leds();
 126:	0e 94 68 00 	call	0xd0	; 0xd0 <leds>
		}

		// Verifica si se presiona el botón de decrementar
		if (!(PINC & (1 << PORTC1))) {
 12a:	31 99       	sbic	0x06, 1	; 6
 12c:	16 c0       	rjmp	.+44     	; 0x15a <main+0x72>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	80 e7       	ldi	r24, 0x70	; 112
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x4c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x56>
 13e:	00 00       	nop
			_delay_ms(50); // Antirrebote
			while (!(PINC & (1 << PORTC1))); // Esperar a que se suelte
 140:	31 9b       	sbis	0x06, 1	; 6
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0x58>
			if (contador > 0) contador--;  // Evitar negativos
 144:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <main+0x6e>
 14c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
 150:	81 50       	subi	r24, 0x01	; 1
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contador>
			leds();
 156:	0e 94 68 00 	call	0xd0	; 0xd0 <leds>
		}
		if (buffer == 'C'){
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	83 34       	cpi	r24, 0x43	; 67
 160:	61 f6       	brne	.-104    	; 0xfa <main+0x12>
			PINB |= (1 << PINB5);
 162:	1d 9a       	sbi	0x03, 5	; 3
			buffer = 0;
 164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	c8 cf       	rjmp	.-112    	; 0xfa <main+0x12>

0000016a <__vector_24>:
void leds(void) {
	PORTD &= ~0b00111100; // Apagar LEDs en D2-D5
	PORTD |= ((contador & 0b00001111) << 2); // Desplazar bits a D2-D5
}

ISR(TWI_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xF8;
 17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	switch(estado){
 17e:	88 7f       	andi	r24, 0xF8	; 248
 180:	80 38       	cpi	r24, 0x80	; 128
 182:	99 f0       	breq	.+38     	; 0x1aa <__vector_24+0x40>
 184:	28 f4       	brcc	.+10     	; 0x190 <__vector_24+0x26>
 186:	80 36       	cpi	r24, 0x60	; 96
 188:	51 f0       	breq	.+20     	; 0x19e <__vector_24+0x34>
 18a:	80 37       	cpi	r24, 0x70	; 112
 18c:	41 f0       	breq	.+16     	; 0x19e <__vector_24+0x34>
 18e:	1d c0       	rjmp	.+58     	; 0x1ca <__vector_24+0x60>
 190:	88 3a       	cpi	r24, 0xA8	; 168
 192:	99 f0       	breq	.+38     	; 0x1ba <__vector_24+0x50>
 194:	88 3b       	cpi	r24, 0xB8	; 184
 196:	89 f0       	breq	.+34     	; 0x1ba <__vector_24+0x50>
 198:	80 39       	cpi	r24, 0x90	; 144
 19a:	b9 f4       	brne	.+46     	; 0x1ca <__vector_24+0x60>
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <__vector_24+0x40>
		case 0x60:
		case 0x70:
			TWCR |= (1 << TWINT)|(1 << TWEA)|(1 << TWEN)|(1 << TWIE);
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	85 6c       	ori	r24, 0xC5	; 197
 1a6:	80 83       	st	Z, r24
			break;
 1a8:	15 c0       	rjmp	.+42     	; 0x1d4 <__vector_24+0x6a>
		case 0x80:
		case 0x90:
			buffer = TWDR;
 1aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //limpiar bandera
 1b2:	85 ec       	ldi	r24, 0xC5	; 197
 1b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			break;
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <__vector_24+0x6a>
		case 0xA8:
		case 0xB8:
			TWDR = contador; //cargar el dato
 1ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
 1be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //enviar
 1c2:	85 ec       	ldi	r24, 0xC5	; 197
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <__vector_24+0x6a>
		default:
		TWCR |= (1 << TWINT) | (1 << TWSTO) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 1ca:	ec eb       	ldi	r30, 0xBC	; 188
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	85 6d       	ori	r24, 0xD5	; 213
 1d2:	80 83       	st	Z, r24
		break;
		
	}
	
	
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
