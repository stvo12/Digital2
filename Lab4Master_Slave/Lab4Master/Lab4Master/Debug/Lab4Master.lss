
Lab4Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000bd4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800116  00800116  00000c7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b72  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa3  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001186  00000000  00000000  0000346d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  000045f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082b  00000000  00000000  00004900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001052  00000000  00000000  0000512b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000617d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3c 02 	call	0x478	; 0x478 <main>
  9e:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART>:
}

uint8_t spiRead(void){
	while(!(SPSR & (1<<SPIF)));
	return(SPDR);
}
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	80 83       	st	Z, r24
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d8:	08 95       	ret

000000da <lcd_port>:
  da:	80 ff       	sbrs	r24, 0
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <lcd_port+0xc>
  de:	9b b1       	in	r25, 0x0b	; 11
  e0:	94 60       	ori	r25, 0x04	; 4
  e2:	9b b9       	out	0x0b, r25	; 11
  e4:	03 c0       	rjmp	.+6      	; 0xec <lcd_port+0x12>
  e6:	9b b1       	in	r25, 0x0b	; 11
  e8:	9b 7f       	andi	r25, 0xFB	; 251
  ea:	9b b9       	out	0x0b, r25	; 11
  ec:	81 ff       	sbrs	r24, 1
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <lcd_port+0x1e>
  f0:	9b b1       	in	r25, 0x0b	; 11
  f2:	98 60       	ori	r25, 0x08	; 8
  f4:	9b b9       	out	0x0b, r25	; 11
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_port+0x24>
  f8:	9b b1       	in	r25, 0x0b	; 11
  fa:	97 7f       	andi	r25, 0xF7	; 247
  fc:	9b b9       	out	0x0b, r25	; 11
  fe:	82 ff       	sbrs	r24, 2
 100:	04 c0       	rjmp	.+8      	; 0x10a <lcd_port+0x30>
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	90 61       	ori	r25, 0x10	; 16
 106:	9b b9       	out	0x0b, r25	; 11
 108:	03 c0       	rjmp	.+6      	; 0x110 <lcd_port+0x36>
 10a:	9b b1       	in	r25, 0x0b	; 11
 10c:	9f 7e       	andi	r25, 0xEF	; 239
 10e:	9b b9       	out	0x0b, r25	; 11
 110:	83 ff       	sbrs	r24, 3
 112:	04 c0       	rjmp	.+8      	; 0x11c <lcd_port+0x42>
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	90 62       	ori	r25, 0x20	; 32
 118:	9b b9       	out	0x0b, r25	; 11
 11a:	03 c0       	rjmp	.+6      	; 0x122 <lcd_port+0x48>
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	9f 7d       	andi	r25, 0xDF	; 223
 120:	9b b9       	out	0x0b, r25	; 11
 122:	84 ff       	sbrs	r24, 4
 124:	04 c0       	rjmp	.+8      	; 0x12e <lcd_port+0x54>
 126:	9b b1       	in	r25, 0x0b	; 11
 128:	90 64       	ori	r25, 0x40	; 64
 12a:	9b b9       	out	0x0b, r25	; 11
 12c:	03 c0       	rjmp	.+6      	; 0x134 <lcd_port+0x5a>
 12e:	9b b1       	in	r25, 0x0b	; 11
 130:	9f 7b       	andi	r25, 0xBF	; 191
 132:	9b b9       	out	0x0b, r25	; 11
 134:	85 ff       	sbrs	r24, 5
 136:	04 c0       	rjmp	.+8      	; 0x140 <lcd_port+0x66>
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	90 68       	ori	r25, 0x80	; 128
 13c:	9b b9       	out	0x0b, r25	; 11
 13e:	03 c0       	rjmp	.+6      	; 0x146 <lcd_port+0x6c>
 140:	9b b1       	in	r25, 0x0b	; 11
 142:	9f 77       	andi	r25, 0x7F	; 127
 144:	9b b9       	out	0x0b, r25	; 11
 146:	86 ff       	sbrs	r24, 6
 148:	04 c0       	rjmp	.+8      	; 0x152 <lcd_port+0x78>
 14a:	95 b1       	in	r25, 0x05	; 5
 14c:	91 60       	ori	r25, 0x01	; 1
 14e:	95 b9       	out	0x05, r25	; 5
 150:	03 c0       	rjmp	.+6      	; 0x158 <lcd_port+0x7e>
 152:	95 b1       	in	r25, 0x05	; 5
 154:	9e 7f       	andi	r25, 0xFE	; 254
 156:	95 b9       	out	0x05, r25	; 5
 158:	88 23       	and	r24, r24
 15a:	24 f4       	brge	.+8      	; 0x164 <lcd_port+0x8a>
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	85 b9       	out	0x05, r24	; 5
 162:	08 95       	ret
 164:	85 b1       	in	r24, 0x05	; 5
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 b9       	out	0x05, r24	; 5
 16a:	08 95       	ret

0000016c <lcd_command>:
 16c:	95 b1       	in	r25, 0x05	; 5
 16e:	97 7f       	andi	r25, 0xF7	; 247
 170:	95 b9       	out	0x05, r25	; 5
 172:	0e 94 6d 00 	call	0xda	; 0xda <lcd_port>
 176:	85 b1       	in	r24, 0x05	; 5
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	85 b9       	out	0x05, r24	; 5
 17c:	8f e7       	ldi	r24, 0x7F	; 127
 17e:	9e e3       	ldi	r25, 0x3E	; 62
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_command+0x14>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_command+0x1a>
 186:	00 00       	nop
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	8b 7f       	andi	r24, 0xFB	; 251
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	08 95       	ret

00000190 <lcd_write_char>:
 190:	95 b1       	in	r25, 0x05	; 5
 192:	98 60       	ori	r25, 0x08	; 8
 194:	95 b9       	out	0x05, r25	; 5
 196:	0e 94 6d 00 	call	0xda	; 0xda <lcd_port>
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	8f e7       	ldi	r24, 0x7F	; 127
 1a2:	9e e3       	ldi	r25, 0x3E	; 62
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_write_char+0x14>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_write_char+0x1a>
 1aa:	00 00       	nop
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	8b 7f       	andi	r24, 0xFB	; 251
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	08 95       	ret

000001b4 <lcd_init>:
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	8a b9       	out	0x0a, r24	; 10
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	84 b9       	out	0x04, r24	; 4
 1bc:	1b b8       	out	0x0b, r1	; 11
 1be:	15 b8       	out	0x05, r1	; 5
 1c0:	88 e3       	ldi	r24, 0x38	; 56
 1c2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1c6:	8f e8       	ldi	r24, 0x8F	; 143
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x16>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_init+0x1c>
 1d0:	00 00       	nop
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1d8:	8f e8       	ldi	r24, 0x8F	; 143
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x28>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_init+0x2e>
 1e2:	00 00       	nop
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1ea:	8f e8       	ldi	r24, 0x8F	; 143
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x3a>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x40>
 1f4:	00 00       	nop
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1fc:	8f e8       	ldi	r24, 0x8F	; 143
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x4c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init+0x52>
 206:	00 00       	nop
 208:	08 95       	ret

0000020a <lcd_setCursor>:
 20a:	61 30       	cpi	r22, 0x01	; 1
 20c:	21 f4       	brne	.+8      	; 0x216 <lcd_setCursor+0xc>
 20e:	81 58       	subi	r24, 0x81	; 129
 210:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 214:	08 95       	ret
 216:	62 30       	cpi	r22, 0x02	; 2
 218:	19 f4       	brne	.+6      	; 0x220 <lcd_setCursor+0x16>
 21a:	81 54       	subi	r24, 0x41	; 65
 21c:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 220:	08 95       	ret

00000222 <lcd_write_string>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
 228:	03 c0       	rjmp	.+6      	; 0x230 <lcd_write_string+0xe>
 22a:	21 96       	adiw	r28, 0x01	; 1
 22c:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_write_char>
 230:	88 81       	ld	r24, Y
 232:	81 11       	cpse	r24, r1
 234:	fa cf       	rjmp	.-12     	; 0x22a <lcd_write_string+0x8>
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <floatToString>:
 23c:	4f 92       	push	r4
 23e:	5f 92       	push	r5
 240:	6f 92       	push	r6
 242:	7f 92       	push	r7
 244:	af 92       	push	r10
 246:	bf 92       	push	r11
 248:	cf 92       	push	r12
 24a:	df 92       	push	r13
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <floatToString+0x1e>
 25a:	00 d0       	rcall	.+0      	; 0x25c <floatToString+0x20>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	2b 01       	movw	r4, r22
 262:	3c 01       	movw	r6, r24
 264:	7a 01       	movw	r14, r20
 266:	59 01       	movw	r10, r18
 268:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fixsfsi>
 26c:	69 83       	std	Y+1, r22	; 0x01
 26e:	7a 83       	std	Y+2, r23	; 0x02
 270:	8b 83       	std	Y+3, r24	; 0x03
 272:	9c 83       	std	Y+4, r25	; 0x04
 274:	29 81       	ldd	r18, Y+1	; 0x01
 276:	3a 81       	ldd	r19, Y+2	; 0x02
 278:	b9 01       	movw	r22, r18
 27a:	33 0f       	add	r19, r19
 27c:	88 0b       	sbc	r24, r24
 27e:	99 0b       	sbc	r25, r25
 280:	0e 94 98 04 	call	0x930	; 0x930 <__floatsisf>
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	c3 01       	movw	r24, r6
 28a:	b2 01       	movw	r22, r4
 28c:	0e 94 81 03 	call	0x702	; 0x702 <__subsf3>
 290:	2b 01       	movw	r4, r22
 292:	3c 01       	movw	r6, r24
 294:	4a e0       	ldi	r20, 0x0A	; 10
 296:	b7 01       	movw	r22, r14
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	0e 94 b3 05 	call	0xb66	; 0xb66 <__itoa_ncheck>
 2a0:	1a 82       	std	Y+2, r1	; 0x02
 2a2:	19 82       	std	Y+1, r1	; 0x01
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <floatToString+0x74>
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	9a 83       	std	Y+2, r25	; 0x02
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	e9 81       	ldd	r30, Y+1	; 0x01
 2b2:	fa 81       	ldd	r31, Y+2	; 0x02
 2b4:	ee 0d       	add	r30, r14
 2b6:	ff 1d       	adc	r31, r15
 2b8:	80 81       	ld	r24, Z
 2ba:	81 11       	cpse	r24, r1
 2bc:	f4 cf       	rjmp	.-24     	; 0x2a6 <floatToString+0x6a>
 2be:	29 81       	ldd	r18, Y+1	; 0x01
 2c0:	3a 81       	ldd	r19, Y+2	; 0x02
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
 2c6:	3a 83       	std	Y+2, r19	; 0x02
 2c8:	29 83       	std	Y+1, r18	; 0x01
 2ca:	8e e2       	ldi	r24, 0x2E	; 46
 2cc:	80 83       	st	Z, r24
 2ce:	00 e0       	ldi	r16, 0x00	; 0
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	2a c0       	rjmp	.+84     	; 0x328 <floatToString+0xec>
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e2       	ldi	r20, 0x20	; 32
 2da:	51 e4       	ldi	r21, 0x41	; 65
 2dc:	c3 01       	movw	r24, r6
 2de:	b2 01       	movw	r22, r4
 2e0:	0e 94 24 05 	call	0xa48	; 0xa48 <__mulsf3>
 2e4:	2b 01       	movw	r4, r22
 2e6:	3c 01       	movw	r6, r24
 2e8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fixsfsi>
 2ec:	c9 80       	ldd	r12, Y+1	; 0x01
 2ee:	da 80       	ldd	r13, Y+2	; 0x02
 2f0:	3f ef       	ldi	r19, 0xFF	; 255
 2f2:	c3 1a       	sub	r12, r19
 2f4:	d3 0a       	sbc	r13, r19
 2f6:	e9 81       	ldd	r30, Y+1	; 0x01
 2f8:	fa 81       	ldd	r31, Y+2	; 0x02
 2fa:	ee 0d       	add	r30, r14
 2fc:	ff 1d       	adc	r31, r15
 2fe:	20 e3       	ldi	r18, 0x30	; 48
 300:	26 0f       	add	r18, r22
 302:	20 83       	st	Z, r18
 304:	07 2e       	mov	r0, r23
 306:	00 0c       	add	r0, r0
 308:	88 0b       	sbc	r24, r24
 30a:	99 0b       	sbc	r25, r25
 30c:	0e 94 98 04 	call	0x930	; 0x930 <__floatsisf>
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	c3 01       	movw	r24, r6
 316:	b2 01       	movw	r22, r4
 318:	0e 94 81 03 	call	0x702	; 0x702 <__subsf3>
 31c:	2b 01       	movw	r4, r22
 31e:	3c 01       	movw	r6, r24
 320:	0f 5f       	subi	r16, 0xFF	; 255
 322:	1f 4f       	sbci	r17, 0xFF	; 255
 324:	da 82       	std	Y+2, r13	; 0x02
 326:	c9 82       	std	Y+1, r12	; 0x01
 328:	0a 15       	cp	r16, r10
 32a:	1b 05       	cpc	r17, r11
 32c:	9c f2       	brlt	.-90     	; 0x2d4 <floatToString+0x98>
 32e:	29 81       	ldd	r18, Y+1	; 0x01
 330:	3a 81       	ldd	r19, Y+2	; 0x02
 332:	2e 0d       	add	r18, r14
 334:	3f 1d       	adc	r19, r15
 336:	f9 01       	movw	r30, r18
 338:	10 82       	st	Z, r1
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	df 90       	pop	r13
 350:	cf 90       	pop	r12
 352:	bf 90       	pop	r11
 354:	af 90       	pop	r10
 356:	7f 90       	pop	r7
 358:	6f 90       	pop	r6
 35a:	5f 90       	pop	r5
 35c:	4f 90       	pop	r4
 35e:	08 95       	ret

00000360 <InitMasterI2C>:

//I2C
//iniciar maestro
void InitMasterI2C(unsigned long SCL_CLOCK, uint8_t Prescaler){
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	8b 01       	movw	r16, r22
 368:	9c 01       	movw	r18, r24
 36a:	c4 2f       	mov	r28, r20
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //pines i2c entrada
 36c:	87 b1       	in	r24, 0x07	; 7
 36e:	8f 7c       	andi	r24, 0xCF	; 207
 370:	87 b9       	out	0x07, r24	; 7
	
	switch(Prescaler){
 372:	44 30       	cpi	r20, 0x04	; 4
 374:	79 f0       	breq	.+30     	; 0x394 <InitMasterI2C+0x34>
 376:	18 f4       	brcc	.+6      	; 0x37e <InitMasterI2C+0x1e>
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	31 f0       	breq	.+12     	; 0x388 <InitMasterI2C+0x28>
 37c:	23 c0       	rjmp	.+70     	; 0x3c4 <InitMasterI2C+0x64>
 37e:	40 31       	cpi	r20, 0x10	; 16
 380:	91 f0       	breq	.+36     	; 0x3a6 <InitMasterI2C+0x46>
 382:	40 34       	cpi	r20, 0x40	; 64
 384:	c9 f0       	breq	.+50     	; 0x3b8 <InitMasterI2C+0x58>
 386:	1e c0       	rjmp	.+60     	; 0x3c4 <InitMasterI2C+0x64>
		case 1:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
 388:	e9 eb       	ldi	r30, 0xB9	; 185
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	8c 7f       	andi	r24, 0xFC	; 252
 390:	80 83       	st	Z, r24
		break;
 392:	1e c0       	rjmp	.+60     	; 0x3d0 <InitMasterI2C+0x70>
		case 4:
			TWSR &= ~(1<<TWPS1);
 394:	e9 eb       	ldi	r30, 0xB9	; 185
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	8d 7f       	andi	r24, 0xFD	; 253
 39c:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS0);
 39e:	80 81       	ld	r24, Z
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	80 83       	st	Z, r24
		break;
 3a4:	15 c0       	rjmp	.+42     	; 0x3d0 <InitMasterI2C+0x70>
		case 16:
			TWSR &= ~(1<<TWPS0);
 3a6:	e9 eb       	ldi	r30, 0xB9	; 185
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	8e 7f       	andi	r24, 0xFE	; 254
 3ae:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS1);
 3b0:	80 81       	ld	r24, Z
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	80 83       	st	Z, r24
		break;
 3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <InitMasterI2C+0x70>
		case 64:
			TWSR |= ((1<<TWPS1)|(1<<TWPS0));
 3b8:	e9 eb       	ldi	r30, 0xB9	; 185
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	83 60       	ori	r24, 0x03	; 3
 3c0:	80 83       	st	Z, r24
		break;
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <InitMasterI2C+0x70>
		default:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
 3c4:	e9 eb       	ldi	r30, 0xB9	; 185
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	8c 7f       	andi	r24, 0xFC	; 252
 3cc:	80 83       	st	Z, r24
			Prescaler = 1;
 3ce:	c1 e0       	ldi	r28, 0x01	; 1
		break;
	}
	TWBR = ((F_CPU/SCL_CLOCK)-16)/(2*Prescaler);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	74 e2       	ldi	r23, 0x24	; 36
 3d4:	84 ef       	ldi	r24, 0xF4	; 244
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	a9 01       	movw	r20, r18
 3da:	98 01       	movw	r18, r16
 3dc:	0e 94 91 05 	call	0xb22	; 0xb22 <__udivmodsi4>
 3e0:	ca 01       	movw	r24, r20
 3e2:	b9 01       	movw	r22, r18
 3e4:	60 51       	subi	r22, 0x10	; 16
 3e6:	71 09       	sbc	r23, r1
 3e8:	81 09       	sbc	r24, r1
 3ea:	91 09       	sbc	r25, r1
 3ec:	4c 2f       	mov	r20, r28
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	9a 01       	movw	r18, r20
 3f2:	22 0f       	add	r18, r18
 3f4:	33 1f       	adc	r19, r19
 3f6:	03 2e       	mov	r0, r19
 3f8:	00 0c       	add	r0, r0
 3fa:	44 0b       	sbc	r20, r20
 3fc:	55 0b       	sbc	r21, r21
 3fe:	0e 94 91 05 	call	0xb22	; 0xb22 <__udivmodsi4>
 402:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
 406:	ec eb       	ldi	r30, 0xBC	; 188
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	80 83       	st	Z, r24
}
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <StartMasterI2C>:
//inicio com
void StartMasterI2C(void){
	//uint8_t estado;
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //ini cond start
 418:	84 ea       	ldi	r24, 0xA4	; 164
 41a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT))); //esperar termina flag TWINT
 41e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 422:	88 23       	and	r24, r24
 424:	e4 f7       	brge	.-8      	; 0x41e <StartMasterI2C+0x6>
}
 426:	08 95       	ret

00000428 <StopMasterI2C>:
//parar com
void StopMasterI2C(void){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO); //ini sec STOP
 428:	84 e9       	ldi	r24, 0x94	; 148
 42a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 42e:	08 95       	ret

00000430 <WriteMasterI2C>:
}
//transm datos, devuelve 0 si slave recibio
uint8_t WriteMasterI2C(uint8_t dato){
	uint8_t estado;
	
	TWDR = dato;
 430:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //ini envio
 434:	84 e8       	ldi	r24, 0x84	; 132
 436:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while(!(TWCR & (1<<TWINT))); //espera flag TWINT
 43a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 43e:	88 23       	and	r24, r24
 440:	e4 f7       	brge	.-8      	; 0x43a <WriteMasterI2C+0xa>
	estado = TWSR & 0xF8;
 442:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 446:	88 7f       	andi	r24, 0xF8	; 248
	// verificar si fue SLA + W con ACK (direccion con ganas de escribir)
	// SLA + R con ACK (direccion con escritura), o un Dato con ACK
	if (estado == 0x18 || estado == 0x28 || estado == 0x40)
 448:	88 31       	cpi	r24, 0x18	; 24
 44a:	31 f0       	breq	.+12     	; 0x458 <WriteMasterI2C+0x28>
 44c:	88 32       	cpi	r24, 0x28	; 40
 44e:	31 f0       	breq	.+12     	; 0x45c <WriteMasterI2C+0x2c>
 450:	80 34       	cpi	r24, 0x40	; 64
 452:	29 f4       	brne	.+10     	; 0x45e <WriteMasterI2C+0x2e>
	{
		return 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	08 95       	ret
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret
 45c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return estado;
	}
}
 45e:	08 95       	ret

00000460 <Setup>:
		//_delay_ms(500);
    }
}

void Setup(void){
	lcd_init();
 460:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_init>
	InitMasterI2C(100000, 1);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	60 ea       	ldi	r22, 0xA0	; 160
 468:	76 e8       	ldi	r23, 0x86	; 134
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 b0 01 	call	0x360	; 0x360 <InitMasterI2C>
	initUART();
 472:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART>
 476:	08 95       	ret

00000478 <main>:

void Setup(void);

int main(void)
{
	PORTD = 0;
 478:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0;
 47a:	15 b8       	out	0x05, r1	; 5
	Setup();
 47c:	0e 94 30 02 	call	0x460	; 0x460 <Setup>
    lcd_setCursor(1,1);
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
    lcd_write_string("   S1:    S2:");
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
	lcd_setCursor(4,2);
	lcd_write_string(buf);*/
    while (1) 
    {
		//Escritura
		StartMasterI2C();
 490:	0e 94 0c 02 	call	0x418	; 0x418 <StartMasterI2C>
		bufferI2C = slave1 << 1 & 0b11111110;
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bufferI2C>
		
		contador = WriteMasterI2C(bufferI2C);
 49a:	0e 94 18 02 	call	0x430	; 0x430 <WriteMasterI2C>
 49e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <contador>
		if (contador != 1)
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	99 f0       	breq	.+38     	; 0x4cc <main+0x54>
		{
			lcd_setCursor(1,1);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			itoa(contador, buf, 10);
 4ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <contador>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4b2:	4a e0       	ldi	r20, 0x0A	; 10
 4b4:	6b e1       	ldi	r22, 0x1B	; 27
 4b6:	71 e0       	ldi	r23, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 b3 05 	call	0xb66	; 0xb66 <__itoa_ncheck>
			lcd_write_string(buf);
 4be:	8b e1       	ldi	r24, 0x1B	; 27
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
			//lcd_write_string("NO");
			StopMasterI2C();
 4c6:	0e 94 14 02 	call	0x428	; 0x428 <StopMasterI2C>
 4ca:	0f c0       	rjmp	.+30     	; 0x4ea <main+0x72>
		}
		else if (contador == 1)
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	69 f4       	brne	.+26     	; 0x4ea <main+0x72>
		{
			WriteMasterI2C('C');
 4d0:	83 e4       	ldi	r24, 0x43	; 67
 4d2:	0e 94 18 02 	call	0x430	; 0x430 <WriteMasterI2C>
			lcd_setCursor(1,1);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			lcd_write_string("SI");
 4de:	8e e0       	ldi	r24, 0x0E	; 14
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
			StopMasterI2C();
 4e6:	0e 94 14 02 	call	0x428	; 0x428 <StopMasterI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	81 ee       	ldi	r24, 0xE1	; 225
 4ee:	94 e0       	ldi	r25, 0x04	; 4
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0x78>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0x82>
 4fa:	00 00       	nop
		}
		_delay_ms(100);
		//Lectura
		StartMasterI2C();
 4fc:	0e 94 0c 02 	call	0x418	; 0x418 <StartMasterI2C>
		bufferI2C = slave1 << 1 | 0b00000001;
 500:	81 e8       	ldi	r24, 0x81	; 129
 502:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bufferI2C>
		
		contador = WriteMasterI2C(bufferI2C);
 506:	0e 94 18 02 	call	0x430	; 0x430 <WriteMasterI2C>
 50a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <contador>
		if (contador != 1)
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	99 f0       	breq	.+38     	; 0x538 <main+0xc0>
		{
			StopMasterI2C();
 512:	0e 94 14 02 	call	0x428	; 0x428 <StopMasterI2C>
			lcd_setCursor(1,2);
 516:	62 e0       	ldi	r22, 0x02	; 2
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			itoa(contador, buf, 10);
 51e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <contador>
 522:	4a e0       	ldi	r20, 0x0A	; 10
 524:	6b e1       	ldi	r22, 0x1B	; 27
 526:	71 e0       	ldi	r23, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 b3 05 	call	0xb66	; 0xb66 <__itoa_ncheck>
			lcd_write_string(buf);
 52e:	8b e1       	ldi	r24, 0x1B	; 27
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
 536:	3f c0       	rjmp	.+126    	; 0x5b6 <main+0x13e>
			//lcd_write_string("NO");
		}
		else if (contador == 1)
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	e9 f5       	brne	.+122    	; 0x5b6 <main+0x13e>
		{
			lcd_setCursor(1,2);
 53c:	62 e0       	ldi	r22, 0x02	; 2
 53e:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			lcd_write_string("SI");
 542:	8e e0       	ldi	r24, 0x0E	; 14
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
			TWCR |= (1<<TWINT); //ini lect
 54a:	ec eb       	ldi	r30, 0xBC	; 188
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	80 68       	ori	r24, 0x80	; 128
 552:	80 83       	st	Z, r24
			while(!(TWCR & (1<<TWINT))); //espera TWINT
 554:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 558:	88 23       	and	r24, r24
 55a:	e4 f7       	brge	.-8      	; 0x554 <main+0xdc>
			
			ValCont = TWDR;
 55c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 560:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
			//ValCont = 4;
			StopMasterI2C();
 564:	0e 94 14 02 	call	0x428	; 0x428 <StopMasterI2C>
			itoa(ValCont, buf, 10);
 568:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 56c:	4a e0       	ldi	r20, 0x0A	; 10
 56e:	6b e1       	ldi	r22, 0x1B	; 27
 570:	71 e0       	ldi	r23, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 b3 05 	call	0xb66	; 0xb66 <__itoa_ncheck>
			if (ValCont < 10)
 578:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 57c:	8a 30       	cpi	r24, 0x0A	; 10
 57e:	88 f4       	brcc	.+34     	; 0x5a2 <main+0x12a>
			{
				lcd_setCursor(4,2);
 580:	62 e0       	ldi	r22, 0x02	; 2
 582:	84 e0       	ldi	r24, 0x04	; 4
 584:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
				lcd_write_string("0");
 588:	81 e1       	ldi	r24, 0x11	; 17
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
				lcd_setCursor(5,2);
 590:	62 e0       	ldi	r22, 0x02	; 2
 592:	85 e0       	ldi	r24, 0x05	; 5
 594:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
				lcd_write_string(buf);
 598:	8b e1       	ldi	r24, 0x1B	; 27
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
 5a0:	0a c0       	rjmp	.+20     	; 0x5b6 <main+0x13e>
			}
			else if (ValCont >= 10)
 5a2:	8a 30       	cpi	r24, 0x0A	; 10
 5a4:	40 f0       	brcs	.+16     	; 0x5b6 <main+0x13e>
			{
				lcd_setCursor(4,2);
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	84 e0       	ldi	r24, 0x04	; 4
 5aa:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
				lcd_write_string(buf);
 5ae:	8b e1       	ldi	r24, 0x1B	; 27
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
			}
		}
		//_delay_ms(500);
		
		StartMasterI2C();
 5b6:	0e 94 0c 02 	call	0x418	; 0x418 <StartMasterI2C>
		bufferI2C = slave2 << 1 & 0b11111110;
 5ba:	80 e6       	ldi	r24, 0x60	; 96
 5bc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bufferI2C>
		
		pote = WriteMasterI2C(bufferI2C);
 5c0:	0e 94 18 02 	call	0x430	; 0x430 <WriteMasterI2C>
 5c4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <pote>
		if (pote != 1)
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	99 f0       	breq	.+38     	; 0x5f2 <main+0x17a>
		{
			lcd_setCursor(8,1);
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	88 e0       	ldi	r24, 0x08	; 8
 5d0:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			itoa(pote, buf, 10);
 5d4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <pote>
 5d8:	4a e0       	ldi	r20, 0x0A	; 10
 5da:	6b e1       	ldi	r22, 0x1B	; 27
 5dc:	71 e0       	ldi	r23, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 b3 05 	call	0xb66	; 0xb66 <__itoa_ncheck>
			lcd_write_string(buf);
 5e4:	8b e1       	ldi	r24, 0x1B	; 27
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
			//lcd_write_string("NO");
			StopMasterI2C();
 5ec:	0e 94 14 02 	call	0x428	; 0x428 <StopMasterI2C>
 5f0:	0f c0       	rjmp	.+30     	; 0x610 <main+0x198>
		}
		else if (pote == 1)
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	69 f4       	brne	.+26     	; 0x610 <main+0x198>
		{
			WriteMasterI2C('P');
 5f6:	80 e5       	ldi	r24, 0x50	; 80
 5f8:	0e 94 18 02 	call	0x430	; 0x430 <WriteMasterI2C>
			lcd_setCursor(8,1);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	88 e0       	ldi	r24, 0x08	; 8
 600:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			lcd_write_string("SI");
 604:	8e e0       	ldi	r24, 0x0E	; 14
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
			StopMasterI2C();
 60c:	0e 94 14 02 	call	0x428	; 0x428 <StopMasterI2C>
 610:	2f ef       	ldi	r18, 0xFF	; 255
 612:	81 ee       	ldi	r24, 0xE1	; 225
 614:	94 e0       	ldi	r25, 0x04	; 4
 616:	21 50       	subi	r18, 0x01	; 1
 618:	80 40       	sbci	r24, 0x00	; 0
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	e1 f7       	brne	.-8      	; 0x616 <main+0x19e>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0x1a8>
 620:	00 00       	nop
		}
		_delay_ms(100);
		//Lectura
		StartMasterI2C();
 622:	0e 94 0c 02 	call	0x418	; 0x418 <StartMasterI2C>
		bufferI2C = slave2 << 1 | 0b00000001;
 626:	81 e6       	ldi	r24, 0x61	; 97
 628:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bufferI2C>
		
		pote = WriteMasterI2C(bufferI2C);
 62c:	0e 94 18 02 	call	0x430	; 0x430 <WriteMasterI2C>
 630:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <pote>
		if (pote != 1)
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	99 f0       	breq	.+38     	; 0x65e <main+0x1e6>
		{
			StopMasterI2C();
 638:	0e 94 14 02 	call	0x428	; 0x428 <StopMasterI2C>
			lcd_setCursor(8,2);
 63c:	62 e0       	ldi	r22, 0x02	; 2
 63e:	88 e0       	ldi	r24, 0x08	; 8
 640:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			itoa(pote, buf, 10);
 644:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <pote>
 648:	4a e0       	ldi	r20, 0x0A	; 10
 64a:	6b e1       	ldi	r22, 0x1B	; 27
 64c:	71 e0       	ldi	r23, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 b3 05 	call	0xb66	; 0xb66 <__itoa_ncheck>
			lcd_write_string(buf);
 654:	8b e1       	ldi	r24, 0x1B	; 27
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
 65c:	19 cf       	rjmp	.-462    	; 0x490 <main+0x18>
			//lcd_write_string("NO");
		}
		else if (pote == 1)
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	09 f0       	breq	.+2      	; 0x664 <main+0x1ec>
 662:	16 cf       	rjmp	.-468    	; 0x490 <main+0x18>
		{
			lcd_setCursor(8,2);
 664:	62 e0       	ldi	r22, 0x02	; 2
 666:	88 e0       	ldi	r24, 0x08	; 8
 668:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			lcd_write_string("SI");
 66c:	8e e0       	ldi	r24, 0x0E	; 14
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
			TWCR |= (1<<TWINT); //ini lect
 674:	ec eb       	ldi	r30, 0xBC	; 188
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	80 68       	ori	r24, 0x80	; 128
 67c:	80 83       	st	Z, r24
			while(!(TWCR & (1<<TWINT))); //espera TWINT
 67e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 682:	88 23       	and	r24, r24
 684:	e4 f7       	brge	.-8      	; 0x67e <main+0x206>
			
			ValorPote = TWDR;
 686:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 68a:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <ValorPote>
			/*TextUART("Pote\n");
			buff_I2C[0] = ValorPote;
			TextUART(buff_I2C);*/
			ConvPote = ValorPote * 5.0/255;
 68e:	70 e0       	ldi	r23, 0x00	; 0
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 98 04 	call	0x930	; 0x930 <__floatsisf>
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	40 ea       	ldi	r20, 0xA0	; 160
 69e:	50 e4       	ldi	r21, 0x40	; 64
 6a0:	0e 94 24 05 	call	0xa48	; 0xa48 <__mulsf3>
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	4f e7       	ldi	r20, 0x7F	; 127
 6aa:	53 e4       	ldi	r21, 0x43	; 67
 6ac:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__divsf3>
 6b0:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <ConvPote>
 6b4:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <ConvPote+0x1>
 6b8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ConvPote+0x2>
 6bc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <ConvPote+0x3>
			StopMasterI2C();
 6c0:	0e 94 14 02 	call	0x428	; 0x428 <StopMasterI2C>
			floatToString(ConvPote, buf, 2);
 6c4:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <ConvPote>
 6c8:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <ConvPote+0x1>
 6cc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ConvPote+0x2>
 6d0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <ConvPote+0x3>
 6d4:	22 e0       	ldi	r18, 0x02	; 2
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	4b e1       	ldi	r20, 0x1B	; 27
 6da:	51 e0       	ldi	r21, 0x01	; 1
 6dc:	0e 94 1e 01 	call	0x23c	; 0x23c <floatToString>
			lcd_setCursor(10,2);
 6e0:	62 e0       	ldi	r22, 0x02	; 2
 6e2:	8a e0       	ldi	r24, 0x0A	; 10
 6e4:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			lcd_write_string(buf);
 6e8:	8b e1       	ldi	r24, 0x1B	; 27
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
			lcd_setCursor(14,2);
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	8e e0       	ldi	r24, 0x0E	; 14
 6f4:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_setCursor>
			lcd_write_string("V");
 6f8:	83 e1       	ldi	r24, 0x13	; 19
 6fa:	91 e0       	ldi	r25, 0x01	; 1
 6fc:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write_string>
 700:	c7 ce       	rjmp	.-626    	; 0x490 <main+0x18>

00000702 <__subsf3>:
 702:	50 58       	subi	r21, 0x80	; 128

00000704 <__addsf3>:
 704:	bb 27       	eor	r27, r27
 706:	aa 27       	eor	r26, r26
 708:	0e 94 99 03 	call	0x732	; 0x732 <__addsf3x>
 70c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>
 710:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_pscA>
 714:	38 f0       	brcs	.+14     	; 0x724 <__addsf3+0x20>
 716:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscB>
 71a:	20 f0       	brcs	.+8      	; 0x724 <__addsf3+0x20>
 71c:	39 f4       	brne	.+14     	; 0x72c <__addsf3+0x28>
 71e:	9f 3f       	cpi	r25, 0xFF	; 255
 720:	19 f4       	brne	.+6      	; 0x728 <__addsf3+0x24>
 722:	26 f4       	brtc	.+8      	; 0x72c <__addsf3+0x28>
 724:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>
 728:	0e f4       	brtc	.+2      	; 0x72c <__addsf3+0x28>
 72a:	e0 95       	com	r30
 72c:	e7 fb       	bst	r30, 7
 72e:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>

00000732 <__addsf3x>:
 732:	e9 2f       	mov	r30, r25
 734:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 738:	58 f3       	brcs	.-42     	; 0x710 <__addsf3+0xc>
 73a:	ba 17       	cp	r27, r26
 73c:	62 07       	cpc	r22, r18
 73e:	73 07       	cpc	r23, r19
 740:	84 07       	cpc	r24, r20
 742:	95 07       	cpc	r25, r21
 744:	20 f0       	brcs	.+8      	; 0x74e <__addsf3x+0x1c>
 746:	79 f4       	brne	.+30     	; 0x766 <__addsf3x+0x34>
 748:	a6 f5       	brtc	.+104    	; 0x7b2 <__addsf3x+0x80>
 74a:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_zero>
 74e:	0e f4       	brtc	.+2      	; 0x752 <__addsf3x+0x20>
 750:	e0 95       	com	r30
 752:	0b 2e       	mov	r0, r27
 754:	ba 2f       	mov	r27, r26
 756:	a0 2d       	mov	r26, r0
 758:	0b 01       	movw	r0, r22
 75a:	b9 01       	movw	r22, r18
 75c:	90 01       	movw	r18, r0
 75e:	0c 01       	movw	r0, r24
 760:	ca 01       	movw	r24, r20
 762:	a0 01       	movw	r20, r0
 764:	11 24       	eor	r1, r1
 766:	ff 27       	eor	r31, r31
 768:	59 1b       	sub	r21, r25
 76a:	99 f0       	breq	.+38     	; 0x792 <__addsf3x+0x60>
 76c:	59 3f       	cpi	r21, 0xF9	; 249
 76e:	50 f4       	brcc	.+20     	; 0x784 <__addsf3x+0x52>
 770:	50 3e       	cpi	r21, 0xE0	; 224
 772:	68 f1       	brcs	.+90     	; 0x7ce <__addsf3x+0x9c>
 774:	1a 16       	cp	r1, r26
 776:	f0 40       	sbci	r31, 0x00	; 0
 778:	a2 2f       	mov	r26, r18
 77a:	23 2f       	mov	r18, r19
 77c:	34 2f       	mov	r19, r20
 77e:	44 27       	eor	r20, r20
 780:	58 5f       	subi	r21, 0xF8	; 248
 782:	f3 cf       	rjmp	.-26     	; 0x76a <__addsf3x+0x38>
 784:	46 95       	lsr	r20
 786:	37 95       	ror	r19
 788:	27 95       	ror	r18
 78a:	a7 95       	ror	r26
 78c:	f0 40       	sbci	r31, 0x00	; 0
 78e:	53 95       	inc	r21
 790:	c9 f7       	brne	.-14     	; 0x784 <__addsf3x+0x52>
 792:	7e f4       	brtc	.+30     	; 0x7b2 <__addsf3x+0x80>
 794:	1f 16       	cp	r1, r31
 796:	ba 0b       	sbc	r27, r26
 798:	62 0b       	sbc	r22, r18
 79a:	73 0b       	sbc	r23, r19
 79c:	84 0b       	sbc	r24, r20
 79e:	ba f0       	brmi	.+46     	; 0x7ce <__addsf3x+0x9c>
 7a0:	91 50       	subi	r25, 0x01	; 1
 7a2:	a1 f0       	breq	.+40     	; 0x7cc <__addsf3x+0x9a>
 7a4:	ff 0f       	add	r31, r31
 7a6:	bb 1f       	adc	r27, r27
 7a8:	66 1f       	adc	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	c2 f7       	brpl	.-16     	; 0x7a0 <__addsf3x+0x6e>
 7b0:	0e c0       	rjmp	.+28     	; 0x7ce <__addsf3x+0x9c>
 7b2:	ba 0f       	add	r27, r26
 7b4:	62 1f       	adc	r22, r18
 7b6:	73 1f       	adc	r23, r19
 7b8:	84 1f       	adc	r24, r20
 7ba:	48 f4       	brcc	.+18     	; 0x7ce <__addsf3x+0x9c>
 7bc:	87 95       	ror	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b7 95       	ror	r27
 7c4:	f7 95       	ror	r31
 7c6:	9e 3f       	cpi	r25, 0xFE	; 254
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__addsf3x+0x9a>
 7ca:	b0 cf       	rjmp	.-160    	; 0x72c <__addsf3+0x28>
 7cc:	93 95       	inc	r25
 7ce:	88 0f       	add	r24, r24
 7d0:	08 f0       	brcs	.+2      	; 0x7d4 <__addsf3x+0xa2>
 7d2:	99 27       	eor	r25, r25
 7d4:	ee 0f       	add	r30, r30
 7d6:	97 95       	ror	r25
 7d8:	87 95       	ror	r24
 7da:	08 95       	ret

000007dc <__divsf3>:
 7dc:	0e 94 02 04 	call	0x804	; 0x804 <__divsf3x>
 7e0:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>
 7e4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscB>
 7e8:	58 f0       	brcs	.+22     	; 0x800 <__DATA_REGION_LENGTH__>
 7ea:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_pscA>
 7ee:	40 f0       	brcs	.+16     	; 0x800 <__DATA_REGION_LENGTH__>
 7f0:	29 f4       	brne	.+10     	; 0x7fc <__divsf3+0x20>
 7f2:	5f 3f       	cpi	r21, 0xFF	; 255
 7f4:	29 f0       	breq	.+10     	; 0x800 <__DATA_REGION_LENGTH__>
 7f6:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 7fa:	51 11       	cpse	r21, r1
 7fc:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 800:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>

00000804 <__divsf3x>:
 804:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 808:	68 f3       	brcs	.-38     	; 0x7e4 <__divsf3+0x8>

0000080a <__divsf3_pse>:
 80a:	99 23       	and	r25, r25
 80c:	b1 f3       	breq	.-20     	; 0x7fa <__divsf3+0x1e>
 80e:	55 23       	and	r21, r21
 810:	91 f3       	breq	.-28     	; 0x7f6 <__divsf3+0x1a>
 812:	95 1b       	sub	r25, r21
 814:	55 0b       	sbc	r21, r21
 816:	bb 27       	eor	r27, r27
 818:	aa 27       	eor	r26, r26
 81a:	62 17       	cp	r22, r18
 81c:	73 07       	cpc	r23, r19
 81e:	84 07       	cpc	r24, r20
 820:	38 f0       	brcs	.+14     	; 0x830 <__divsf3_pse+0x26>
 822:	9f 5f       	subi	r25, 0xFF	; 255
 824:	5f 4f       	sbci	r21, 0xFF	; 255
 826:	22 0f       	add	r18, r18
 828:	33 1f       	adc	r19, r19
 82a:	44 1f       	adc	r20, r20
 82c:	aa 1f       	adc	r26, r26
 82e:	a9 f3       	breq	.-22     	; 0x81a <__divsf3_pse+0x10>
 830:	35 d0       	rcall	.+106    	; 0x89c <__divsf3_pse+0x92>
 832:	0e 2e       	mov	r0, r30
 834:	3a f0       	brmi	.+14     	; 0x844 <__divsf3_pse+0x3a>
 836:	e0 e8       	ldi	r30, 0x80	; 128
 838:	32 d0       	rcall	.+100    	; 0x89e <__divsf3_pse+0x94>
 83a:	91 50       	subi	r25, 0x01	; 1
 83c:	50 40       	sbci	r21, 0x00	; 0
 83e:	e6 95       	lsr	r30
 840:	00 1c       	adc	r0, r0
 842:	ca f7       	brpl	.-14     	; 0x836 <__divsf3_pse+0x2c>
 844:	2b d0       	rcall	.+86     	; 0x89c <__divsf3_pse+0x92>
 846:	fe 2f       	mov	r31, r30
 848:	29 d0       	rcall	.+82     	; 0x89c <__divsf3_pse+0x92>
 84a:	66 0f       	add	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	bb 1f       	adc	r27, r27
 852:	26 17       	cp	r18, r22
 854:	37 07       	cpc	r19, r23
 856:	48 07       	cpc	r20, r24
 858:	ab 07       	cpc	r26, r27
 85a:	b0 e8       	ldi	r27, 0x80	; 128
 85c:	09 f0       	breq	.+2      	; 0x860 <__divsf3_pse+0x56>
 85e:	bb 0b       	sbc	r27, r27
 860:	80 2d       	mov	r24, r0
 862:	bf 01       	movw	r22, r30
 864:	ff 27       	eor	r31, r31
 866:	93 58       	subi	r25, 0x83	; 131
 868:	5f 4f       	sbci	r21, 0xFF	; 255
 86a:	3a f0       	brmi	.+14     	; 0x87a <__divsf3_pse+0x70>
 86c:	9e 3f       	cpi	r25, 0xFE	; 254
 86e:	51 05       	cpc	r21, r1
 870:	78 f0       	brcs	.+30     	; 0x890 <__divsf3_pse+0x86>
 872:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 876:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	e4 f3       	brlt	.-8      	; 0x876 <__divsf3_pse+0x6c>
 87e:	98 3e       	cpi	r25, 0xE8	; 232
 880:	d4 f3       	brlt	.-12     	; 0x876 <__divsf3_pse+0x6c>
 882:	86 95       	lsr	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	b7 95       	ror	r27
 88a:	f7 95       	ror	r31
 88c:	9f 5f       	subi	r25, 0xFF	; 255
 88e:	c9 f7       	brne	.-14     	; 0x882 <__divsf3_pse+0x78>
 890:	88 0f       	add	r24, r24
 892:	91 1d       	adc	r25, r1
 894:	96 95       	lsr	r25
 896:	87 95       	ror	r24
 898:	97 f9       	bld	r25, 7
 89a:	08 95       	ret
 89c:	e1 e0       	ldi	r30, 0x01	; 1
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	bb 1f       	adc	r27, r27
 8a6:	62 17       	cp	r22, r18
 8a8:	73 07       	cpc	r23, r19
 8aa:	84 07       	cpc	r24, r20
 8ac:	ba 07       	cpc	r27, r26
 8ae:	20 f0       	brcs	.+8      	; 0x8b8 <__divsf3_pse+0xae>
 8b0:	62 1b       	sub	r22, r18
 8b2:	73 0b       	sbc	r23, r19
 8b4:	84 0b       	sbc	r24, r20
 8b6:	ba 0b       	sbc	r27, r26
 8b8:	ee 1f       	adc	r30, r30
 8ba:	88 f7       	brcc	.-30     	; 0x89e <__divsf3_pse+0x94>
 8bc:	e0 95       	com	r30
 8be:	08 95       	ret

000008c0 <__fixsfsi>:
 8c0:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 8c4:	68 94       	set
 8c6:	b1 11       	cpse	r27, r1
 8c8:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 8cc:	08 95       	ret

000008ce <__fixunssfsi>:
 8ce:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_splitA>
 8d2:	88 f0       	brcs	.+34     	; 0x8f6 <__fixunssfsi+0x28>
 8d4:	9f 57       	subi	r25, 0x7F	; 127
 8d6:	98 f0       	brcs	.+38     	; 0x8fe <__fixunssfsi+0x30>
 8d8:	b9 2f       	mov	r27, r25
 8da:	99 27       	eor	r25, r25
 8dc:	b7 51       	subi	r27, 0x17	; 23
 8de:	b0 f0       	brcs	.+44     	; 0x90c <__stack+0xd>
 8e0:	e1 f0       	breq	.+56     	; 0x91a <__stack+0x1b>
 8e2:	66 0f       	add	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	1a f0       	brmi	.+6      	; 0x8f2 <__fixunssfsi+0x24>
 8ec:	ba 95       	dec	r27
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__fixunssfsi+0x14>
 8f0:	14 c0       	rjmp	.+40     	; 0x91a <__stack+0x1b>
 8f2:	b1 30       	cpi	r27, 0x01	; 1
 8f4:	91 f0       	breq	.+36     	; 0x91a <__stack+0x1b>
 8f6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_zero>
 8fa:	b1 e0       	ldi	r27, 0x01	; 1
 8fc:	08 95       	ret
 8fe:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_zero>
 902:	67 2f       	mov	r22, r23
 904:	78 2f       	mov	r23, r24
 906:	88 27       	eor	r24, r24
 908:	b8 5f       	subi	r27, 0xF8	; 248
 90a:	39 f0       	breq	.+14     	; 0x91a <__stack+0x1b>
 90c:	b9 3f       	cpi	r27, 0xF9	; 249
 90e:	cc f3       	brlt	.-14     	; 0x902 <__stack+0x3>
 910:	86 95       	lsr	r24
 912:	77 95       	ror	r23
 914:	67 95       	ror	r22
 916:	b3 95       	inc	r27
 918:	d9 f7       	brne	.-10     	; 0x910 <__stack+0x11>
 91a:	3e f4       	brtc	.+14     	; 0x92a <__stack+0x2b>
 91c:	90 95       	com	r25
 91e:	80 95       	com	r24
 920:	70 95       	com	r23
 922:	61 95       	neg	r22
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	8f 4f       	sbci	r24, 0xFF	; 255
 928:	9f 4f       	sbci	r25, 0xFF	; 255
 92a:	08 95       	ret

0000092c <__floatunsisf>:
 92c:	e8 94       	clt
 92e:	09 c0       	rjmp	.+18     	; 0x942 <__floatsisf+0x12>

00000930 <__floatsisf>:
 930:	97 fb       	bst	r25, 7
 932:	3e f4       	brtc	.+14     	; 0x942 <__floatsisf+0x12>
 934:	90 95       	com	r25
 936:	80 95       	com	r24
 938:	70 95       	com	r23
 93a:	61 95       	neg	r22
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	99 23       	and	r25, r25
 944:	a9 f0       	breq	.+42     	; 0x970 <__floatsisf+0x40>
 946:	f9 2f       	mov	r31, r25
 948:	96 e9       	ldi	r25, 0x96	; 150
 94a:	bb 27       	eor	r27, r27
 94c:	93 95       	inc	r25
 94e:	f6 95       	lsr	r31
 950:	87 95       	ror	r24
 952:	77 95       	ror	r23
 954:	67 95       	ror	r22
 956:	b7 95       	ror	r27
 958:	f1 11       	cpse	r31, r1
 95a:	f8 cf       	rjmp	.-16     	; 0x94c <__floatsisf+0x1c>
 95c:	fa f4       	brpl	.+62     	; 0x99c <__floatsisf+0x6c>
 95e:	bb 0f       	add	r27, r27
 960:	11 f4       	brne	.+4      	; 0x966 <__floatsisf+0x36>
 962:	60 ff       	sbrs	r22, 0
 964:	1b c0       	rjmp	.+54     	; 0x99c <__floatsisf+0x6c>
 966:	6f 5f       	subi	r22, 0xFF	; 255
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	16 c0       	rjmp	.+44     	; 0x99c <__floatsisf+0x6c>
 970:	88 23       	and	r24, r24
 972:	11 f0       	breq	.+4      	; 0x978 <__floatsisf+0x48>
 974:	96 e9       	ldi	r25, 0x96	; 150
 976:	11 c0       	rjmp	.+34     	; 0x99a <__floatsisf+0x6a>
 978:	77 23       	and	r23, r23
 97a:	21 f0       	breq	.+8      	; 0x984 <__floatsisf+0x54>
 97c:	9e e8       	ldi	r25, 0x8E	; 142
 97e:	87 2f       	mov	r24, r23
 980:	76 2f       	mov	r23, r22
 982:	05 c0       	rjmp	.+10     	; 0x98e <__floatsisf+0x5e>
 984:	66 23       	and	r22, r22
 986:	71 f0       	breq	.+28     	; 0x9a4 <__floatsisf+0x74>
 988:	96 e8       	ldi	r25, 0x86	; 134
 98a:	86 2f       	mov	r24, r22
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	60 e0       	ldi	r22, 0x00	; 0
 990:	2a f0       	brmi	.+10     	; 0x99c <__floatsisf+0x6c>
 992:	9a 95       	dec	r25
 994:	66 0f       	add	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	da f7       	brpl	.-10     	; 0x992 <__floatsisf+0x62>
 99c:	88 0f       	add	r24, r24
 99e:	96 95       	lsr	r25
 9a0:	87 95       	ror	r24
 9a2:	97 f9       	bld	r25, 7
 9a4:	08 95       	ret

000009a6 <__fp_inf>:
 9a6:	97 f9       	bld	r25, 7
 9a8:	9f 67       	ori	r25, 0x7F	; 127
 9aa:	80 e8       	ldi	r24, 0x80	; 128
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	08 95       	ret

000009b2 <__fp_nan>:
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	80 ec       	ldi	r24, 0xC0	; 192
 9b6:	08 95       	ret

000009b8 <__fp_pscA>:
 9b8:	00 24       	eor	r0, r0
 9ba:	0a 94       	dec	r0
 9bc:	16 16       	cp	r1, r22
 9be:	17 06       	cpc	r1, r23
 9c0:	18 06       	cpc	r1, r24
 9c2:	09 06       	cpc	r0, r25
 9c4:	08 95       	ret

000009c6 <__fp_pscB>:
 9c6:	00 24       	eor	r0, r0
 9c8:	0a 94       	dec	r0
 9ca:	12 16       	cp	r1, r18
 9cc:	13 06       	cpc	r1, r19
 9ce:	14 06       	cpc	r1, r20
 9d0:	05 06       	cpc	r0, r21
 9d2:	08 95       	ret

000009d4 <__fp_round>:
 9d4:	09 2e       	mov	r0, r25
 9d6:	03 94       	inc	r0
 9d8:	00 0c       	add	r0, r0
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0xc>
 9dc:	88 23       	and	r24, r24
 9de:	52 f0       	brmi	.+20     	; 0x9f4 <__fp_round+0x20>
 9e0:	bb 0f       	add	r27, r27
 9e2:	40 f4       	brcc	.+16     	; 0x9f4 <__fp_round+0x20>
 9e4:	bf 2b       	or	r27, r31
 9e6:	11 f4       	brne	.+4      	; 0x9ec <__fp_round+0x18>
 9e8:	60 ff       	sbrs	r22, 0
 9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <__fp_round+0x20>
 9ec:	6f 5f       	subi	r22, 0xFF	; 255
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__fp_split3>:
 9f6:	57 fd       	sbrc	r21, 7
 9f8:	90 58       	subi	r25, 0x80	; 128
 9fa:	44 0f       	add	r20, r20
 9fc:	55 1f       	adc	r21, r21
 9fe:	59 f0       	breq	.+22     	; 0xa16 <__fp_splitA+0x10>
 a00:	5f 3f       	cpi	r21, 0xFF	; 255
 a02:	71 f0       	breq	.+28     	; 0xa20 <__fp_splitA+0x1a>
 a04:	47 95       	ror	r20

00000a06 <__fp_splitA>:
 a06:	88 0f       	add	r24, r24
 a08:	97 fb       	bst	r25, 7
 a0a:	99 1f       	adc	r25, r25
 a0c:	61 f0       	breq	.+24     	; 0xa26 <__fp_splitA+0x20>
 a0e:	9f 3f       	cpi	r25, 0xFF	; 255
 a10:	79 f0       	breq	.+30     	; 0xa30 <__fp_splitA+0x2a>
 a12:	87 95       	ror	r24
 a14:	08 95       	ret
 a16:	12 16       	cp	r1, r18
 a18:	13 06       	cpc	r1, r19
 a1a:	14 06       	cpc	r1, r20
 a1c:	55 1f       	adc	r21, r21
 a1e:	f2 cf       	rjmp	.-28     	; 0xa04 <__fp_split3+0xe>
 a20:	46 95       	lsr	r20
 a22:	f1 df       	rcall	.-30     	; 0xa06 <__fp_splitA>
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <__fp_splitA+0x30>
 a26:	16 16       	cp	r1, r22
 a28:	17 06       	cpc	r1, r23
 a2a:	18 06       	cpc	r1, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	f1 cf       	rjmp	.-30     	; 0xa12 <__fp_splitA+0xc>
 a30:	86 95       	lsr	r24
 a32:	71 05       	cpc	r23, r1
 a34:	61 05       	cpc	r22, r1
 a36:	08 94       	sec
 a38:	08 95       	ret

00000a3a <__fp_zero>:
 a3a:	e8 94       	clt

00000a3c <__fp_szero>:
 a3c:	bb 27       	eor	r27, r27
 a3e:	66 27       	eor	r22, r22
 a40:	77 27       	eor	r23, r23
 a42:	cb 01       	movw	r24, r22
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__mulsf3>:
 a48:	0e 94 37 05 	call	0xa6e	; 0xa6e <__mulsf3x>
 a4c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>
 a50:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_pscA>
 a54:	38 f0       	brcs	.+14     	; 0xa64 <__mulsf3+0x1c>
 a56:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscB>
 a5a:	20 f0       	brcs	.+8      	; 0xa64 <__mulsf3+0x1c>
 a5c:	95 23       	and	r25, r21
 a5e:	11 f0       	breq	.+4      	; 0xa64 <__mulsf3+0x1c>
 a60:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 a64:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>
 a68:	11 24       	eor	r1, r1
 a6a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>

00000a6e <__mulsf3x>:
 a6e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 a72:	70 f3       	brcs	.-36     	; 0xa50 <__mulsf3+0x8>

00000a74 <__mulsf3_pse>:
 a74:	95 9f       	mul	r25, r21
 a76:	c1 f3       	breq	.-16     	; 0xa68 <__mulsf3+0x20>
 a78:	95 0f       	add	r25, r21
 a7a:	50 e0       	ldi	r21, 0x00	; 0
 a7c:	55 1f       	adc	r21, r21
 a7e:	62 9f       	mul	r22, r18
 a80:	f0 01       	movw	r30, r0
 a82:	72 9f       	mul	r23, r18
 a84:	bb 27       	eor	r27, r27
 a86:	f0 0d       	add	r31, r0
 a88:	b1 1d       	adc	r27, r1
 a8a:	63 9f       	mul	r22, r19
 a8c:	aa 27       	eor	r26, r26
 a8e:	f0 0d       	add	r31, r0
 a90:	b1 1d       	adc	r27, r1
 a92:	aa 1f       	adc	r26, r26
 a94:	64 9f       	mul	r22, r20
 a96:	66 27       	eor	r22, r22
 a98:	b0 0d       	add	r27, r0
 a9a:	a1 1d       	adc	r26, r1
 a9c:	66 1f       	adc	r22, r22
 a9e:	82 9f       	mul	r24, r18
 aa0:	22 27       	eor	r18, r18
 aa2:	b0 0d       	add	r27, r0
 aa4:	a1 1d       	adc	r26, r1
 aa6:	62 1f       	adc	r22, r18
 aa8:	73 9f       	mul	r23, r19
 aaa:	b0 0d       	add	r27, r0
 aac:	a1 1d       	adc	r26, r1
 aae:	62 1f       	adc	r22, r18
 ab0:	83 9f       	mul	r24, r19
 ab2:	a0 0d       	add	r26, r0
 ab4:	61 1d       	adc	r22, r1
 ab6:	22 1f       	adc	r18, r18
 ab8:	74 9f       	mul	r23, r20
 aba:	33 27       	eor	r19, r19
 abc:	a0 0d       	add	r26, r0
 abe:	61 1d       	adc	r22, r1
 ac0:	23 1f       	adc	r18, r19
 ac2:	84 9f       	mul	r24, r20
 ac4:	60 0d       	add	r22, r0
 ac6:	21 1d       	adc	r18, r1
 ac8:	82 2f       	mov	r24, r18
 aca:	76 2f       	mov	r23, r22
 acc:	6a 2f       	mov	r22, r26
 ace:	11 24       	eor	r1, r1
 ad0:	9f 57       	subi	r25, 0x7F	; 127
 ad2:	50 40       	sbci	r21, 0x00	; 0
 ad4:	9a f0       	brmi	.+38     	; 0xafc <__mulsf3_pse+0x88>
 ad6:	f1 f0       	breq	.+60     	; 0xb14 <__mulsf3_pse+0xa0>
 ad8:	88 23       	and	r24, r24
 ada:	4a f0       	brmi	.+18     	; 0xaee <__mulsf3_pse+0x7a>
 adc:	ee 0f       	add	r30, r30
 ade:	ff 1f       	adc	r31, r31
 ae0:	bb 1f       	adc	r27, r27
 ae2:	66 1f       	adc	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	91 50       	subi	r25, 0x01	; 1
 aea:	50 40       	sbci	r21, 0x00	; 0
 aec:	a9 f7       	brne	.-22     	; 0xad8 <__mulsf3_pse+0x64>
 aee:	9e 3f       	cpi	r25, 0xFE	; 254
 af0:	51 05       	cpc	r21, r1
 af2:	80 f0       	brcs	.+32     	; 0xb14 <__mulsf3_pse+0xa0>
 af4:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 af8:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 afc:	5f 3f       	cpi	r21, 0xFF	; 255
 afe:	e4 f3       	brlt	.-8      	; 0xaf8 <__mulsf3_pse+0x84>
 b00:	98 3e       	cpi	r25, 0xE8	; 232
 b02:	d4 f3       	brlt	.-12     	; 0xaf8 <__mulsf3_pse+0x84>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b7 95       	ror	r27
 b0c:	f7 95       	ror	r31
 b0e:	e7 95       	ror	r30
 b10:	9f 5f       	subi	r25, 0xFF	; 255
 b12:	c1 f7       	brne	.-16     	; 0xb04 <__mulsf3_pse+0x90>
 b14:	fe 2b       	or	r31, r30
 b16:	88 0f       	add	r24, r24
 b18:	91 1d       	adc	r25, r1
 b1a:	96 95       	lsr	r25
 b1c:	87 95       	ror	r24
 b1e:	97 f9       	bld	r25, 7
 b20:	08 95       	ret

00000b22 <__udivmodsi4>:
 b22:	a1 e2       	ldi	r26, 0x21	; 33
 b24:	1a 2e       	mov	r1, r26
 b26:	aa 1b       	sub	r26, r26
 b28:	bb 1b       	sub	r27, r27
 b2a:	fd 01       	movw	r30, r26
 b2c:	0d c0       	rjmp	.+26     	; 0xb48 <__udivmodsi4_ep>

00000b2e <__udivmodsi4_loop>:
 b2e:	aa 1f       	adc	r26, r26
 b30:	bb 1f       	adc	r27, r27
 b32:	ee 1f       	adc	r30, r30
 b34:	ff 1f       	adc	r31, r31
 b36:	a2 17       	cp	r26, r18
 b38:	b3 07       	cpc	r27, r19
 b3a:	e4 07       	cpc	r30, r20
 b3c:	f5 07       	cpc	r31, r21
 b3e:	20 f0       	brcs	.+8      	; 0xb48 <__udivmodsi4_ep>
 b40:	a2 1b       	sub	r26, r18
 b42:	b3 0b       	sbc	r27, r19
 b44:	e4 0b       	sbc	r30, r20
 b46:	f5 0b       	sbc	r31, r21

00000b48 <__udivmodsi4_ep>:
 b48:	66 1f       	adc	r22, r22
 b4a:	77 1f       	adc	r23, r23
 b4c:	88 1f       	adc	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	1a 94       	dec	r1
 b52:	69 f7       	brne	.-38     	; 0xb2e <__udivmodsi4_loop>
 b54:	60 95       	com	r22
 b56:	70 95       	com	r23
 b58:	80 95       	com	r24
 b5a:	90 95       	com	r25
 b5c:	9b 01       	movw	r18, r22
 b5e:	ac 01       	movw	r20, r24
 b60:	bd 01       	movw	r22, r26
 b62:	cf 01       	movw	r24, r30
 b64:	08 95       	ret

00000b66 <__itoa_ncheck>:
 b66:	bb 27       	eor	r27, r27
 b68:	4a 30       	cpi	r20, 0x0A	; 10
 b6a:	31 f4       	brne	.+12     	; 0xb78 <__itoa_ncheck+0x12>
 b6c:	99 23       	and	r25, r25
 b6e:	22 f4       	brpl	.+8      	; 0xb78 <__itoa_ncheck+0x12>
 b70:	bd e2       	ldi	r27, 0x2D	; 45
 b72:	90 95       	com	r25
 b74:	81 95       	neg	r24
 b76:	9f 4f       	sbci	r25, 0xFF	; 255
 b78:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__utoa_common>

00000b7c <__utoa_ncheck>:
 b7c:	bb 27       	eor	r27, r27

00000b7e <__utoa_common>:
 b7e:	fb 01       	movw	r30, r22
 b80:	55 27       	eor	r21, r21
 b82:	aa 27       	eor	r26, r26
 b84:	88 0f       	add	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	aa 1f       	adc	r26, r26
 b8a:	a4 17       	cp	r26, r20
 b8c:	10 f0       	brcs	.+4      	; 0xb92 <__utoa_common+0x14>
 b8e:	a4 1b       	sub	r26, r20
 b90:	83 95       	inc	r24
 b92:	50 51       	subi	r21, 0x10	; 16
 b94:	b9 f7       	brne	.-18     	; 0xb84 <__utoa_common+0x6>
 b96:	a0 5d       	subi	r26, 0xD0	; 208
 b98:	aa 33       	cpi	r26, 0x3A	; 58
 b9a:	08 f0       	brcs	.+2      	; 0xb9e <__utoa_common+0x20>
 b9c:	a9 5d       	subi	r26, 0xD9	; 217
 b9e:	a1 93       	st	Z+, r26
 ba0:	00 97       	sbiw	r24, 0x00	; 0
 ba2:	79 f7       	brne	.-34     	; 0xb82 <__utoa_common+0x4>
 ba4:	b1 11       	cpse	r27, r1
 ba6:	b1 93       	st	Z+, r27
 ba8:	11 92       	st	Z+, r1
 baa:	cb 01       	movw	r24, r22
 bac:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <strrev>

00000bb0 <strrev>:
 bb0:	dc 01       	movw	r26, r24
 bb2:	fc 01       	movw	r30, r24
 bb4:	67 2f       	mov	r22, r23
 bb6:	71 91       	ld	r23, Z+
 bb8:	77 23       	and	r23, r23
 bba:	e1 f7       	brne	.-8      	; 0xbb4 <strrev+0x4>
 bbc:	32 97       	sbiw	r30, 0x02	; 2
 bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <strrev+0x18>
 bc0:	7c 91       	ld	r23, X
 bc2:	6d 93       	st	X+, r22
 bc4:	70 83       	st	Z, r23
 bc6:	62 91       	ld	r22, -Z
 bc8:	ae 17       	cp	r26, r30
 bca:	bf 07       	cpc	r27, r31
 bcc:	c8 f3       	brcs	.-14     	; 0xbc0 <strrev+0x10>
 bce:	08 95       	ret

00000bd0 <_exit>:
 bd0:	f8 94       	cli

00000bd2 <__stop_program>:
 bd2:	ff cf       	rjmp	.-2      	; 0xbd2 <__stop_program>
