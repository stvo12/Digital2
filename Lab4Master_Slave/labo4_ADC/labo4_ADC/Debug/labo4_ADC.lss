
labo4_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000952  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055a  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023d  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000021a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  88:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
	
}
void ADC7(void){
	//ADC7
	ADMUX &= ~((1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX0));
	ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	90 64       	ori	r25, 0x40	; 64
  98:	90 83       	st	Z, r25
  9a:	90 81       	ld	r25, Z
  9c:	9f 77       	andi	r25, 0x7F	; 127
  9e:	90 83       	st	Z, r25
  a0:	90 81       	ld	r25, Z
  a2:	90 62       	ori	r25, 0x20	; 32
  a4:	90 83       	st	Z, r25
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	98 68       	ori	r25, 0x88	; 136
  ae:	90 83       	st	Z, r25
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	21 f4       	brne	.+8      	; 0xbc <ADC_init+0x2c>
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	31 f4       	brne	.+12     	; 0xcc <ADC_init+0x3c>
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret
  cc:	88 30       	cpi	r24, 0x08	; 8
  ce:	31 f4       	brne	.+12     	; 0xdc <ADC_init+0x4c>
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret
  dc:	80 31       	cpi	r24, 0x10	; 16
  de:	31 f4       	brne	.+12     	; 0xec <ADC_init+0x5c>
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret
  ec:	80 32       	cpi	r24, 0x20	; 32
  ee:	31 f4       	brne	.+12     	; 0xfc <ADC_init+0x6c>
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	85 60       	ori	r24, 0x05	; 5
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret
  fc:	80 38       	cpi	r24, 0x80	; 128
  fe:	31 f4       	brne	.+12     	; 0x10c <ADC_init+0x7c>
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	87 60       	ori	r24, 0x07	; 7
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	87 60       	ori	r24, 0x07	; 7
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <ADC0>:
 118:	ec e7       	ldi	r30, 0x7C	; 124
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <conversion>:
}

void conversion(void){
	ADCSRA |= (1<<ADSC);//HABILITAR CONVERSION
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <I2C_slave_init>:
#include <avr/io.h>
#include <stdint.h>
#include "I2C_SLAVE.h"

void I2C_slave_init(uint8_t address){
	DDRC &= ~((1 << DDC4)|(DDC5));
 130:	97 b1       	in	r25, 0x07	; 7
 132:	9a 7e       	andi	r25, 0xEA	; 234
 134:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1; //direccion que tendra
 136:	88 0f       	add	r24, r24
 138:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>

	TWCR = (1 << TWEA)|(1 << TWEN)|(1 << TWIE); //habilita la ISR
 13c:	85 e4       	ldi	r24, 0x45	; 69
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 142:	08 95       	ret

00000144 <main>:
#define slave_address 0x30

volatile uint8_t adc_value1;

int main(void) {
		cli();  // Deshabilita interrupciones globales
 144:	f8 94       	cli
		DDRC &= ~((1 << PORTC4) | (1 << PORTC5)); //Entradas
 146:	87 b1       	in	r24, 0x07	; 7
 148:	8f 7c       	andi	r24, 0xCF	; 207
 14a:	87 b9       	out	0x07, r24	; 7
		PORTC |= (1 << PORTC4) | (1 << PORTC5); //pull up
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	80 63       	ori	r24, 0x30	; 48
 150:	88 b9       	out	0x08, r24	; 8
		DDRC &= ~(1 << PORTC0);
 152:	38 98       	cbi	0x07, 0	; 7
		DDRB |= (1 << DDB5);
 154:	25 9a       	sbi	0x04, 5	; 4
	
	ADC_init(128);  // Inicializa ADC con un prescaler de 128
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	//DIDR0 |= (ADC0D);
	ADC0();  // Selecciona el canal ADC0
 15c:	0e 94 8c 00 	call	0x118	; 0x118 <ADC0>
	conversion();  // Inicia la conversión del ADC
 160:	0e 94 92 00 	call	0x124	; 0x124 <conversion>
	
	I2C_slave_init(slave_address);  // Inicializa I2C en modo esclavo con la dirección definida
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 98 00 	call	0x130	; 0x130 <I2C_slave_init>
	sei();  // Habilita interrupciones globales
 16a:	78 94       	sei
	
	while (1) {
				if (buffer == 'P'){
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	80 35       	cpi	r24, 0x50	; 80
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x2c>
					PORTB |= (1 << DDB5);
 174:	2d 9a       	sbi	0x05, 5	; 5
					buffer = 0;
 176:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	f8 cf       	rjmp	.-16     	; 0x16c <main+0x28>

0000017c <__vector_21>:
				}
	}
}

ISR(ADC_vect) {
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	adc_value1 = ADCH;  // Lee el valor del ADC
 19e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1a2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value1>
	conversion();  // Inicia una nueva conversión
 1a6:	0e 94 92 00 	call	0x124	; 0x124 <conversion>
	ADCSRA |= (1<<ADIF);
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	80 83       	st	Z, r24
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_24>:

ISR(TWI_vect){
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xF8;
 1e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	switch(estado){
 1ea:	88 7f       	andi	r24, 0xF8	; 248
 1ec:	80 38       	cpi	r24, 0x80	; 128
 1ee:	99 f0       	breq	.+38     	; 0x216 <__vector_24+0x40>
 1f0:	28 f4       	brcc	.+10     	; 0x1fc <__vector_24+0x26>
 1f2:	80 36       	cpi	r24, 0x60	; 96
 1f4:	51 f0       	breq	.+20     	; 0x20a <__vector_24+0x34>
 1f6:	80 37       	cpi	r24, 0x70	; 112
 1f8:	41 f0       	breq	.+16     	; 0x20a <__vector_24+0x34>
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <__vector_24+0x60>
 1fc:	88 3a       	cpi	r24, 0xA8	; 168
 1fe:	99 f0       	breq	.+38     	; 0x226 <__vector_24+0x50>
 200:	88 3b       	cpi	r24, 0xB8	; 184
 202:	89 f0       	breq	.+34     	; 0x226 <__vector_24+0x50>
 204:	80 39       	cpi	r24, 0x90	; 144
 206:	b9 f4       	brne	.+46     	; 0x236 <__vector_24+0x60>
 208:	06 c0       	rjmp	.+12     	; 0x216 <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |= (1 << TWINT)|(1 << TWEA)|(1 << TWEN)|(1 << TWIE);
 20a:	ec eb       	ldi	r30, 0xBC	; 188
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	85 6c       	ori	r24, 0xC5	; 197
 212:	80 83       	st	Z, r24
		break;
 214:	15 c0       	rjmp	.+42     	; 0x240 <__vector_24+0x6a>
		case 0x80:
		case 0x90:
		buffer = TWDR;
 216:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 21a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //limpiar bandera
 21e:	85 ec       	ldi	r24, 0xC5	; 197
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 224:	0d c0       	rjmp	.+26     	; 0x240 <__vector_24+0x6a>
		case 0xA8:
		case 0xB8:
		TWDR = adc_value1; //cargar el dato
 226:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adc_value1>
 22a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //enviar
 22e:	85 ec       	ldi	r24, 0xC5	; 197
 230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 234:	05 c0       	rjmp	.+10     	; 0x240 <__vector_24+0x6a>
		default:
		TWCR |= (1 << TWINT) | (1 << TWSTO) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 236:	ec eb       	ldi	r30, 0xBC	; 188
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	85 6d       	ori	r24, 0xD5	; 213
 23e:	80 83       	st	Z, r24
		break;
		
	}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
