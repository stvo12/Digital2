
Lab6AT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000002a4  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800136  00800136  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce9  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a36  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000664  00000000  00000000  00002b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000319f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 34       	cpi	r26, 0x43	; 67
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 98 00 	call	0x130	; 0x130 <main>
  9e:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART>:
	OCR0B = Cycle;
}

void initUART(void){
	//rx y tx como entrada y salida
	DDRD &= ~(1<<DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0;
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
	
	UCSR0C = 0;
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	//asincrono, sin paridad, 1 stop, 8 caract
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	80 83       	st	Z, r24
	//valor baud y velocidad(9600)
	UBRR0 = 103;
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d8:	08 95       	ret

000000da <WriteUART>:
}

void WriteUART(char Caracter){
	while (!(UCSR0A & (1<<UDRE0)));
  da:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  de:	95 ff       	sbrs	r25, 5
  e0:	fc cf       	rjmp	.-8      	; 0xda <WriteUART>
	UDR0 = Caracter;
  e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e6:	08 95       	ret

000000e8 <TextUART>:
}

void TextUART(char * Texto){
  e8:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0; Texto[i]!= '\0'; i++){
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	07 c0       	rjmp	.+14     	; 0xfc <TextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)) );
  ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f2:	95 ff       	sbrs	r25, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <TextUART+0x6>
		UDR0 = Texto[i];
  f6:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = Caracter;
}

void TextUART(char * Texto){
	uint8_t i;
	for (i=0; Texto[i]!= '\0'; i++){
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	fa 01       	movw	r30, r20
  fe:	e2 0f       	add	r30, r18
 100:	f1 1d       	adc	r31, r1
 102:	30 81       	ld	r19, Z
 104:	31 11       	cpse	r19, r1
 106:	f3 cf       	rjmp	.-26     	; 0xee <TextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)) );
		UDR0 = Texto[i];
	}
}
 108:	08 95       	ret

0000010a <Setup>:
    {
    }
}

void Setup(void){
	initUART();
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART>
	DDRC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3) | (1<<PC4) | (1<<PC5));
 10e:	87 b1       	in	r24, 0x07	; 7
 110:	80 7c       	andi	r24, 0xC0	; 192
 112:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3) | (1<<PC4) | (1<<PC5));
 114:	88 b1       	in	r24, 0x08	; 8
 116:	8f 63       	ori	r24, 0x3F	; 63
 118:	88 b9       	out	0x08, r24	; 8
	// Habilitar la interrupción de cambio de pin en PC0 (PCINT8) y PC3 (PCINT11)
	PCICR |= (1 << PCIE1);  // Habilitar interrupciones de cambio de pin para el grupo PCINT[14:8]
 11a:	e8 e6       	ldi	r30, 0x68	; 104
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3) | (1 << PCINT4) | (1 << PCINT5);  // Habilitar interrupciones de cambio de pin para PC0 (PCINT8), PC1 (PCINT9) y PC2 (PCINT10)
 124:	ec e6       	ldi	r30, 0x6C	; 108
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	8f 63       	ori	r24, 0x3F	; 63
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <main>:

void Setup(void);

int main(void)
{
	Setup();
 130:	0e 94 85 00 	call	0x10a	; 0x10a <Setup>
	sei();
 134:	78 94       	sei
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0x6>

00000138 <__vector_4>:
	// Habilitar la interrupción de cambio de pin en PC0 (PCINT8) y PC3 (PCINT11)
	PCICR |= (1 << PCIE1);  // Habilitar interrupciones de cambio de pin para el grupo PCINT[14:8]
	PCMSK1 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3) | (1 << PCINT4) | (1 << PCINT5);  // Habilitar interrupciones de cambio de pin para PC0 (PCINT8), PC1 (PCINT9) y PC2 (PCINT10)
}

ISR(PCINT1_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	uint8_t PINCVar = PINC;
 15a:	86 b1       	in	r24, 0x06	; 6
	A = PINCVar & (1 << PINC0);
 15c:	81 70       	andi	r24, 0x01	; 1
 15e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <A>
 162:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <A+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <__vector_4+0x34>
 174:	00 c0       	rjmp	.+0      	; 0x176 <__vector_4+0x3e>
 176:	00 00       	nop
	_delay_ms(20);
	PINCVar = PINC;
 178:	86 b1       	in	r24, 0x06	; 6
	B = PINCVar & (1 << PINC1);
 17a:	82 70       	andi	r24, 0x02	; 2
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <B+0x1>
 182:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <B>
	PINCVar = PINC;
 186:	26 b1       	in	r18, 0x06	; 6
	ARR = PINCVar & (1 << PINC2);
 188:	24 70       	andi	r18, 0x04	; 4
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <ARR+0x1>
 190:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <ARR>
	PINCVar = PINC;
 194:	46 b1       	in	r20, 0x06	; 6
	ABA = PINCVar & (1 << PINC3);
 196:	48 70       	andi	r20, 0x08	; 8
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	50 93 42 01 	sts	0x0142, r21	; 0x800142 <ABA+0x1>
 19e:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <ABA>
	PINCVar = PINC;
 1a2:	66 b1       	in	r22, 0x06	; 6
	IZQ = PINCVar & (1 << PINC4);
 1a4:	60 71       	andi	r22, 0x10	; 16
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <IZQ+0x1>
 1ac:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <IZQ>
	PINCVar = PINC;
 1b0:	e6 b1       	in	r30, 0x06	; 6
	DER = PINCVar & (1 << PINC5);
 1b2:	e0 72       	andi	r30, 0x20	; 32
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	f0 93 40 01 	sts	0x0140, r31	; 0x800140 <DER+0x1>
 1ba:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <DER>
	
	if (!A){
 1be:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <A>
 1c2:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <A+0x1>
 1c6:	ab 2b       	or	r26, r27
 1c8:	29 f4       	brne	.+10     	; 0x1d4 <__vector_4+0x9c>
		TextUART("Boton A\n");
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 74 00 	call	0xe8	; 0xe8 <TextUART>
 1d2:	22 c0       	rjmp	.+68     	; 0x218 <__vector_4+0xe0>
	}
	else if (!B){
 1d4:	89 2b       	or	r24, r25
 1d6:	29 f4       	brne	.+10     	; 0x1e2 <__vector_4+0xaa>
		TextUART("Boton B\n");
 1d8:	89 e0       	ldi	r24, 0x09	; 9
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 74 00 	call	0xe8	; 0xe8 <TextUART>
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <__vector_4+0xe0>
	}
	else if (!ARR){
 1e2:	23 2b       	or	r18, r19
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <__vector_4+0xb8>
		TextUART("Arriba\n");
 1e6:	82 e1       	ldi	r24, 0x12	; 18
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 74 00 	call	0xe8	; 0xe8 <TextUART>
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <__vector_4+0xe0>
	}
	else if (!ABA){
 1f0:	45 2b       	or	r20, r21
 1f2:	29 f4       	brne	.+10     	; 0x1fe <__vector_4+0xc6>
		TextUART("Abajo\n");
 1f4:	8a e1       	ldi	r24, 0x1A	; 26
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 74 00 	call	0xe8	; 0xe8 <TextUART>
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <__vector_4+0xe0>
	}
	else if (!IZQ){
 1fe:	67 2b       	or	r22, r23
 200:	29 f4       	brne	.+10     	; 0x20c <__vector_4+0xd4>
		TextUART("Izquierda\n");
 202:	81 e2       	ldi	r24, 0x21	; 33
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 74 00 	call	0xe8	; 0xe8 <TextUART>
 20a:	06 c0       	rjmp	.+12     	; 0x218 <__vector_4+0xe0>
	}
	else if (!DER){
 20c:	ef 2b       	or	r30, r31
 20e:	21 f4       	brne	.+8      	; 0x218 <__vector_4+0xe0>
		TextUART("Derecha\n");
 210:	8c e2       	ldi	r24, 0x2C	; 44
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 74 00 	call	0xe8	; 0xe8 <TextUART>
	}
	PCIFR |= (1 << PCIF1); 
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	8b bb       	out	0x1b, r24	; 27
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_18>:

ISR(USART_RX_vect){
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	bufferTX = UDR0;
 262:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 266:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
	
	// Reenviar el dato recibido (opcional, tipo echo)
	WriteUART(bufferTX);
 26a:	0e 94 6d 00 	call	0xda	; 0xda <WriteUART>
	
	// Si detectas fin de línea, podrías hacer algo especial
	if (bufferTX == '\n') {
 26e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 272:	8a 30       	cpi	r24, 0x0A	; 10
 274:	21 f4       	brne	.+8      	; 0x27e <__vector_18+0x3e>
		TextUART("\n");
 276:	87 e0       	ldi	r24, 0x07	; 7
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 74 00 	call	0xe8	; 0xe8 <TextUART>
	}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
